
LFGates_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08004894  08004894  00014894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a90  08004a90  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  08004a90  08004a90  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a90  08004a90  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a90  08004a90  00014a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a94  08004a94  00014a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08004a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000218  08004cb0  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08004cb0  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8bb  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001be5  00000000  00000000  0002ab03  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c8  00000000  00000000  0002c6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006e0  00000000  00000000  0002ceb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c24c  00000000  00000000  0002d590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008089  00000000  00000000  000497dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a73a7  00000000  00000000  00051865  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f8c0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000255c  00000000  00000000  000f8c88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800487c 	.word	0x0800487c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800487c 	.word	0x0800487c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <ui8FindTokensInString>:
};

enum State {TOKEN,DELIMITER};
uint8_t ui8TokenCounter = 0;

uint8_t ui8FindTokensInString(char *pcString){
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	enum State eState = DELIMITER;
 80002b8:	2301      	movs	r3, #1
 80002ba:	73fb      	strb	r3, [r7, #15]
		uint8_t ui8TokenCounter = 0;
 80002bc:	2300      	movs	r3, #0
 80002be:	73bb      	strb	r3, [r7, #14]
		uint8_t ui8CharCounter = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	737b      	strb	r3, [r7, #13]
		char cActualChar;

		for(ui8CharCounter=0; pcString[ui8CharCounter] != NULL; ui8CharCounter++){
 80002c4:	2300      	movs	r3, #0
 80002c6:	737b      	strb	r3, [r7, #13]
 80002c8:	e02e      	b.n	8000328 <ui8FindTokensInString+0x78>
			cActualChar = pcString[ui8CharCounter];
 80002ca:	7b7b      	ldrb	r3, [r7, #13]
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	4413      	add	r3, r2
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	733b      	strb	r3, [r7, #12]
			switch(eState){
 80002d4:	7bfb      	ldrb	r3, [r7, #15]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d01a      	beq.n	8000310 <ui8FindTokensInString+0x60>
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d121      	bne.n	8000322 <ui8FindTokensInString+0x72>
				case DELIMITER:
					if(cActualChar == DELIMITER_CHAR){
 80002de:	7b3b      	ldrb	r3, [r7, #12]
 80002e0:	2b2b      	cmp	r3, #43	; 0x2b
 80002e2:	d102      	bne.n	80002ea <ui8FindTokensInString+0x3a>
						eState = DELIMITER;
 80002e4:	2301      	movs	r3, #1
 80002e6:	73fb      	strb	r3, [r7, #15]
						asToken[ui8TokenCounter].uValue.pcString = pcString + ui8CharCounter;
						ui8TokenCounter++;
					}else{
						return(ui8TokenCounter);
					}
					break;
 80002e8:	e01b      	b.n	8000322 <ui8FindTokensInString+0x72>
					}else if(ui8TokenCounter < MAX_TOKEN_NR){
 80002ea:	7bbb      	ldrb	r3, [r7, #14]
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d80d      	bhi.n	800030c <ui8FindTokensInString+0x5c>
						eState = TOKEN;
 80002f0:	2300      	movs	r3, #0
 80002f2:	73fb      	strb	r3, [r7, #15]
						asToken[ui8TokenCounter].uValue.pcString = pcString + ui8CharCounter;
 80002f4:	7b7a      	ldrb	r2, [r7, #13]
 80002f6:	7bbb      	ldrb	r3, [r7, #14]
 80002f8:	6879      	ldr	r1, [r7, #4]
 80002fa:	440a      	add	r2, r1
 80002fc:	4911      	ldr	r1, [pc, #68]	; (8000344 <ui8FindTokensInString+0x94>)
 80002fe:	00db      	lsls	r3, r3, #3
 8000300:	440b      	add	r3, r1
 8000302:	605a      	str	r2, [r3, #4]
						ui8TokenCounter++;
 8000304:	7bbb      	ldrb	r3, [r7, #14]
 8000306:	3301      	adds	r3, #1
 8000308:	73bb      	strb	r3, [r7, #14]
					break;
 800030a:	e00a      	b.n	8000322 <ui8FindTokensInString+0x72>
						return(ui8TokenCounter);
 800030c:	7bbb      	ldrb	r3, [r7, #14]
 800030e:	e012      	b.n	8000336 <ui8FindTokensInString+0x86>
				case TOKEN:
					if(cActualChar!= DELIMITER_CHAR){
 8000310:	7b3b      	ldrb	r3, [r7, #12]
 8000312:	2b2b      	cmp	r3, #43	; 0x2b
 8000314:	d002      	beq.n	800031c <ui8FindTokensInString+0x6c>
						eState = TOKEN;
 8000316:	2300      	movs	r3, #0
 8000318:	73fb      	strb	r3, [r7, #15]
					}else{
						eState = DELIMITER;
					}
					break;
 800031a:	e001      	b.n	8000320 <ui8FindTokensInString+0x70>
						eState = DELIMITER;
 800031c:	2301      	movs	r3, #1
 800031e:	73fb      	strb	r3, [r7, #15]
					break;
 8000320:	bf00      	nop
		for(ui8CharCounter=0; pcString[ui8CharCounter] != NULL; ui8CharCounter++){
 8000322:	7b7b      	ldrb	r3, [r7, #13]
 8000324:	3301      	adds	r3, #1
 8000326:	737b      	strb	r3, [r7, #13]
 8000328:	7b7b      	ldrb	r3, [r7, #13]
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	4413      	add	r3, r2
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d1ca      	bne.n	80002ca <ui8FindTokensInString+0x1a>
			}
		}
		return ui8TokenCounter;
 8000334:	7bbb      	ldrb	r3, [r7, #14]
}
 8000336:	4618      	mov	r0, r3
 8000338:	3714      	adds	r7, #20
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	20000244 	.word	0x20000244

08000348 <eStringToKeyword>:

Result eStringToKeyword(char pcStr[], KeywordCode *peKeywordCode){
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	6039      	str	r1, [r7, #0]
	unsigned char ucKeywordCounter;

	for(ucKeywordCounter=0;ucKeywordCounter<MAX_KEYWORD_NR;ucKeywordCounter++){
 8000352:	2300      	movs	r3, #0
 8000354:	73fb      	strb	r3, [r7, #15]
 8000356:	e01d      	b.n	8000394 <eStringToKeyword+0x4c>
		if(strcmp(pcStr,asKeywordList[ucKeywordCounter].cString) == 0){
 8000358:	7bfa      	ldrb	r2, [r7, #15]
 800035a:	4613      	mov	r3, r2
 800035c:	005b      	lsls	r3, r3, #1
 800035e:	4413      	add	r3, r2
 8000360:	005b      	lsls	r3, r3, #1
 8000362:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <eStringToKeyword+0x5c>)
 8000364:	4413      	add	r3, r2
 8000366:	3301      	adds	r3, #1
 8000368:	4619      	mov	r1, r3
 800036a:	6878      	ldr	r0, [r7, #4]
 800036c:	f7ff ff38 	bl	80001e0 <strcmp>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d10b      	bne.n	800038e <eStringToKeyword+0x46>
			*peKeywordCode = asKeywordList[ucKeywordCounter].eCode;
 8000376:	7bfa      	ldrb	r2, [r7, #15]
 8000378:	490a      	ldr	r1, [pc, #40]	; (80003a4 <eStringToKeyword+0x5c>)
 800037a:	4613      	mov	r3, r2
 800037c:	005b      	lsls	r3, r3, #1
 800037e:	4413      	add	r3, r2
 8000380:	005b      	lsls	r3, r3, #1
 8000382:	440b      	add	r3, r1
 8000384:	781a      	ldrb	r2, [r3, #0]
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	701a      	strb	r2, [r3, #0]
			return OK;
 800038a:	2300      	movs	r3, #0
 800038c:	e006      	b.n	800039c <eStringToKeyword+0x54>
	for(ucKeywordCounter=0;ucKeywordCounter<MAX_KEYWORD_NR;ucKeywordCounter++){
 800038e:	7bfb      	ldrb	r3, [r7, #15]
 8000390:	3301      	adds	r3, #1
 8000392:	73fb      	strb	r3, [r7, #15]
 8000394:	7bfb      	ldrb	r3, [r7, #15]
 8000396:	2b09      	cmp	r3, #9
 8000398:	d9de      	bls.n	8000358 <eStringToKeyword+0x10>

		}
	}
	return FAIL;
 800039a:	2301      	movs	r3, #1
}
 800039c:	4618      	mov	r0, r3
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20000000 	.word	0x20000000

080003a8 <DecodeTokens>:

Result DecodeTokens(){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0

    unsigned int uiNumber;
    unsigned char ucTokenIndex;
    KeywordCode eKeyword;

    for(ucTokenIndex=0; ucTokenIndex < ui8TokenCounter; ucTokenIndex++){
 80003ae:	2300      	movs	r3, #0
 80003b0:	73fb      	strb	r3, [r7, #15]
 80003b2:	e03b      	b.n	800042c <DecodeTokens+0x84>
        if((eStringToKeyword (asToken[ucTokenIndex].uValue.pcString, &eKeyword))== OK){
 80003b4:	7bfb      	ldrb	r3, [r7, #15]
 80003b6:	4a22      	ldr	r2, [pc, #136]	; (8000440 <DecodeTokens+0x98>)
 80003b8:	00db      	lsls	r3, r3, #3
 80003ba:	4413      	add	r3, r2
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	1dfa      	adds	r2, r7, #7
 80003c0:	4611      	mov	r1, r2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ffc0 	bl	8000348 <eStringToKeyword>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d10c      	bne.n	80003e8 <DecodeTokens+0x40>
            asToken[ucTokenIndex].eType = KEYWORD;
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
 80003d0:	4a1b      	ldr	r2, [pc, #108]	; (8000440 <DecodeTokens+0x98>)
 80003d2:	2100      	movs	r1, #0
 80003d4:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
            asToken[ucTokenIndex].uValue.eKeyword=eKeyword;
 80003d8:	7bfb      	ldrb	r3, [r7, #15]
 80003da:	79f9      	ldrb	r1, [r7, #7]
 80003dc:	4a18      	ldr	r2, [pc, #96]	; (8000440 <DecodeTokens+0x98>)
 80003de:	00db      	lsls	r3, r3, #3
 80003e0:	4413      	add	r3, r2
 80003e2:	460a      	mov	r2, r1
 80003e4:	711a      	strb	r2, [r3, #4]
 80003e6:	e01e      	b.n	8000426 <DecodeTokens+0x7e>
        }
        else if(sscanf(asToken[ucTokenIndex].uValue.pcString,"%u",&uiNumber) == 1){
 80003e8:	7bfb      	ldrb	r3, [r7, #15]
 80003ea:	4a15      	ldr	r2, [pc, #84]	; (8000440 <DecodeTokens+0x98>)
 80003ec:	00db      	lsls	r3, r3, #3
 80003ee:	4413      	add	r3, r2
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	f107 0208 	add.w	r2, r7, #8
 80003f6:	4913      	ldr	r1, [pc, #76]	; (8000444 <DecodeTokens+0x9c>)
 80003f8:	4618      	mov	r0, r3
 80003fa:	f003 fc43 	bl	8003c84 <siscanf>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b01      	cmp	r3, #1
 8000402:	d10b      	bne.n	800041c <DecodeTokens+0x74>
            asToken[ucTokenIndex].eType = NUMBER;
 8000404:	7bfb      	ldrb	r3, [r7, #15]
 8000406:	4a0e      	ldr	r2, [pc, #56]	; (8000440 <DecodeTokens+0x98>)
 8000408:	2101      	movs	r1, #1
 800040a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
            asToken[ucTokenIndex].uValue.uiNumber = uiNumber;
 800040e:	7bfb      	ldrb	r3, [r7, #15]
 8000410:	68ba      	ldr	r2, [r7, #8]
 8000412:	490b      	ldr	r1, [pc, #44]	; (8000440 <DecodeTokens+0x98>)
 8000414:	00db      	lsls	r3, r3, #3
 8000416:	440b      	add	r3, r1
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	e004      	b.n	8000426 <DecodeTokens+0x7e>
        }
        else{
            asToken[ucTokenIndex].eType = STRING;
 800041c:	7bfb      	ldrb	r3, [r7, #15]
 800041e:	4a08      	ldr	r2, [pc, #32]	; (8000440 <DecodeTokens+0x98>)
 8000420:	2102      	movs	r1, #2
 8000422:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    for(ucTokenIndex=0; ucTokenIndex < ui8TokenCounter; ucTokenIndex++){
 8000426:	7bfb      	ldrb	r3, [r7, #15]
 8000428:	3301      	adds	r3, #1
 800042a:	73fb      	strb	r3, [r7, #15]
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <DecodeTokens+0xa0>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	7bfa      	ldrb	r2, [r7, #15]
 8000432:	429a      	cmp	r2, r3
 8000434:	d3be      	bcc.n	80003b4 <DecodeTokens+0xc>
        }
    }
    return OK;
 8000436:	2300      	movs	r3, #0
}
 8000438:	4618      	mov	r0, r3
 800043a:	3710      	adds	r7, #16
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000244 	.word	0x20000244
 8000444:	08004894 	.word	0x08004894
 8000448:	20000234 	.word	0x20000234

0800044c <ReplaceCharactersInString>:

void ReplaceCharactersInString(char pcString[], char cOldChar, char cNewChar){
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	460b      	mov	r3, r1
 8000456:	70fb      	strb	r3, [r7, #3]
 8000458:	4613      	mov	r3, r2
 800045a:	70bb      	strb	r3, [r7, #2]
	char *pString = pcString;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	60fb      	str	r3, [r7, #12]
	while((pString = strchr(pString,cOldChar)) != NULL){
 8000460:	e004      	b.n	800046c <ReplaceCharactersInString+0x20>
		*pString++ = cNewChar;
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	1c5a      	adds	r2, r3, #1
 8000466:	60fa      	str	r2, [r7, #12]
 8000468:	78ba      	ldrb	r2, [r7, #2]
 800046a:	701a      	strb	r2, [r3, #0]
	while((pString = strchr(pString,cOldChar)) != NULL){
 800046c:	78fb      	ldrb	r3, [r7, #3]
 800046e:	4619      	mov	r1, r3
 8000470:	68f8      	ldr	r0, [r7, #12]
 8000472:	f003 fc33 	bl	8003cdc <strchr>
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d1f1      	bne.n	8000462 <ReplaceCharactersInString+0x16>
	}
}
 800047e:	bf00      	nop
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <DecodeMsg>:

void DecodeMsg(char *pcString){
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	ui8TokenCounter = ui8FindTokensInString(pcString);
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f7ff ff0d 	bl	80002b0 <ui8FindTokensInString>
 8000496:	4603      	mov	r3, r0
 8000498:	461a      	mov	r2, r3
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <DecodeMsg+0x2c>)
 800049c:	701a      	strb	r2, [r3, #0]
	ReplaceCharactersInString(pcString,DELIMITER_CHAR,NULL);
 800049e:	2200      	movs	r2, #0
 80004a0:	212b      	movs	r1, #43	; 0x2b
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f7ff ffd2 	bl	800044c <ReplaceCharactersInString>
	DecodeTokens();
 80004a8:	f7ff ff7e 	bl	80003a8 <DecodeTokens>
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000234 	.word	0x20000234

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fbda 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f810 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f8c2 	bl	800064c <MX_GPIO_Init>
  MX_DMA_Init();
 80004c8:	f000 f89a 	bl	8000600 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004cc:	f000 f868 	bl	80005a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1,cBufferReceived,RX_FRAME);
 80004d0:	2208      	movs	r2, #8
 80004d2:	4902      	ldr	r1, [pc, #8]	; (80004dc <main+0x24>)
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <main+0x28>)
 80004d6:	f002 fd55 	bl	8002f84 <HAL_UART_Receive_DMA>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004da:	e7fe      	b.n	80004da <main+0x22>
 80004dc:	2000025c 	.word	0x2000025c
 80004e0:	200002ec 	.word	0x200002ec

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b0a6      	sub	sp, #152	; 0x98
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004ee:	2228      	movs	r2, #40	; 0x28
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f003 fbbe 	bl	8003c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2258      	movs	r2, #88	; 0x58
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f003 fbb0 	bl	8003c74 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000514:	2302      	movs	r3, #2
 8000516:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000518:	2301      	movs	r3, #1
 800051a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051c:	2310      	movs	r3, #16
 800051e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000522:	2302      	movs	r3, #2
 8000524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000528:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800052c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000530:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000534:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000542:	4618      	mov	r0, r3
 8000544:	f001 f8d2 	bl	80016ec <HAL_RCC_OscConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800054e:	f000 f9fd 	bl	800094c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	230f      	movs	r3, #15
 8000554:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000556:	2302      	movs	r3, #2
 8000558:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800055e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000562:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000568:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800056c:	2102      	movs	r1, #2
 800056e:	4618      	mov	r0, r3
 8000570:	f001 ffd2 	bl	8002518 <HAL_RCC_ClockConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800057a:	f000 f9e7 	bl	800094c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800057e:	2301      	movs	r3, #1
 8000580:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	4618      	mov	r0, r3
 800058a:	f002 f9fb 	bl	8002984 <HAL_RCCEx_PeriphCLKConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000594:	f000 f9da 	bl	800094c <Error_Handler>
  }
}
 8000598:	bf00      	nop
 800059a:	3798      	adds	r7, #152	; 0x98
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <MX_USART1_UART_Init+0x58>)
 80005a6:	4a15      	ldr	r2, [pc, #84]	; (80005fc <MX_USART1_UART_Init+0x5c>)
 80005a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <MX_USART1_UART_Init+0x58>)
 80005ac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80005b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <MX_USART1_UART_Init+0x58>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <MX_USART1_UART_Init+0x58>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <MX_USART1_UART_Init+0x58>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <MX_USART1_UART_Init+0x58>)
 80005c6:	220c      	movs	r2, #12
 80005c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <MX_USART1_UART_Init+0x58>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <MX_USART1_UART_Init+0x58>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <MX_USART1_UART_Init+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <MX_USART1_UART_Init+0x58>)
 80005de:	2200      	movs	r2, #0
 80005e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <MX_USART1_UART_Init+0x58>)
 80005e4:	f002 fbec 	bl	8002dc0 <HAL_UART_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005ee:	f000 f9ad 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200002ec 	.word	0x200002ec
 80005fc:	40013800 	.word	0x40013800

08000600 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_DMA_Init+0x48>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <MX_DMA_Init+0x48>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <MX_DMA_Init+0x48>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2100      	movs	r1, #0
 8000622:	200e      	movs	r0, #14
 8000624:	f000 fc67 	bl	8000ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000628:	200e      	movs	r0, #14
 800062a:	f000 fc80 	bl	8000f2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	200f      	movs	r0, #15
 8000634:	f000 fc5f 	bl	8000ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000638:	200f      	movs	r0, #15
 800063a:	f000 fc78 	bl	8000f2e <HAL_NVIC_EnableIRQ>

}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	4b3f      	ldr	r3, [pc, #252]	; (8000760 <MX_GPIO_Init+0x114>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a3e      	ldr	r2, [pc, #248]	; (8000760 <MX_GPIO_Init+0x114>)
 8000668:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b3c      	ldr	r3, [pc, #240]	; (8000760 <MX_GPIO_Init+0x114>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800067a:	4b39      	ldr	r3, [pc, #228]	; (8000760 <MX_GPIO_Init+0x114>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	4a38      	ldr	r2, [pc, #224]	; (8000760 <MX_GPIO_Init+0x114>)
 8000680:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000684:	6153      	str	r3, [r2, #20]
 8000686:	4b36      	ldr	r3, [pc, #216]	; (8000760 <MX_GPIO_Init+0x114>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b33      	ldr	r3, [pc, #204]	; (8000760 <MX_GPIO_Init+0x114>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	4a32      	ldr	r2, [pc, #200]	; (8000760 <MX_GPIO_Init+0x114>)
 8000698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069c:	6153      	str	r3, [r2, #20]
 800069e:	4b30      	ldr	r3, [pc, #192]	; (8000760 <MX_GPIO_Init+0x114>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <MX_GPIO_Init+0x114>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a2c      	ldr	r2, [pc, #176]	; (8000760 <MX_GPIO_Init+0x114>)
 80006b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006b4:	6153      	str	r3, [r2, #20]
 80006b6:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <MX_GPIO_Init+0x114>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2120      	movs	r1, #32
 80006c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ca:	f000 ffc5 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2120      	movs	r1, #32
 80006d2:	4824      	ldr	r0, [pc, #144]	; (8000764 <MX_GPIO_Init+0x118>)
 80006d4:	f000 ffc0 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <MX_GPIO_Init+0x11c>)
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	481f      	ldr	r0, [pc, #124]	; (800076c <MX_GPIO_Init+0x120>)
 80006ee:	f000 fe29 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006f2:	2320      	movs	r3, #32
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070c:	f000 fe1a 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_GPIO_Init+0x124>)
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800071a:	2301      	movs	r3, #1
 800071c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000728:	f000 fe0c 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 800072c:	2320      	movs	r3, #32
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	4808      	ldr	r0, [pc, #32]	; (8000764 <MX_GPIO_Init+0x118>)
 8000744:	f000 fdfe 	bl	8001344 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	2100      	movs	r1, #0
 800074c:	2028      	movs	r0, #40	; 0x28
 800074e:	f000 fbd2 	bl	8000ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000752:	2028      	movs	r0, #40	; 0x28
 8000754:	f000 fbeb 	bl	8000f2e <HAL_NVIC_EnableIRQ>

}
 8000758:	bf00      	nop
 800075a:	3728      	adds	r7, #40	; 0x28
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40021000 	.word	0x40021000
 8000764:	48000400 	.word	0x48000400
 8000768:	10210000 	.word	0x10210000
 800076c:	48000800 	.word	0x48000800
 8000770:	10110000 	.word	0x10110000

08000774 <putc>:

/* USER CODE BEGIN 4 */
void putc(char c){
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)&c,1,1000);
 800077e:	1df9      	adds	r1, r7, #7
 8000780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000784:	2201      	movs	r2, #1
 8000786:	4803      	ldr	r0, [pc, #12]	; (8000794 <putc+0x20>)
 8000788:	f002 fb68 	bl	8002e5c <HAL_UART_Transmit>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200002ec 	.word	0x200002ec

08000798 <puts>:


uint8_t puts(char *cBufferTransmit, unsigned char ucBufferSize){
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	70fb      	strb	r3, [r7, #3]
	unsigned char ucCharacterCounter;

	for(ucCharacterCounter = 0; ucCharacterCounter <= ucBufferSize; ucCharacterCounter++){
 80007a4:	2300      	movs	r3, #0
 80007a6:	73fb      	strb	r3, [r7, #15]
 80007a8:	e008      	b.n	80007bc <puts+0x24>
		if(cBufferTransmit[ucBufferSize] == NULL)
 80007aa:	78fb      	ldrb	r3, [r7, #3]
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	4413      	add	r3, r2
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d007      	beq.n	80007c6 <puts+0x2e>
	for(ucCharacterCounter = 0; ucCharacterCounter <= ucBufferSize; ucCharacterCounter++){
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	3301      	adds	r3, #1
 80007ba:	73fb      	strb	r3, [r7, #15]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d9f2      	bls.n	80007aa <puts+0x12>
 80007c4:	e000      	b.n	80007c8 <puts+0x30>
			break;
 80007c6:	bf00      	nop
	}
	if(ucCharacterCounter == ucBufferSize){
 80007c8:	7bfa      	ldrb	r2, [r7, #15]
 80007ca:	78fb      	ldrb	r3, [r7, #3]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d101      	bne.n	80007d4 <puts+0x3c>
		return 1;
 80007d0:	2301      	movs	r3, #1
 80007d2:	e019      	b.n	8000808 <puts+0x70>
	}
	for(unsigned char ucCharacterCounter = 0; cBufferTransmit[ucCharacterCounter] != NULL; ucCharacterCounter++){
 80007d4:	2300      	movs	r3, #0
 80007d6:	73bb      	strb	r3, [r7, #14]
 80007d8:	e009      	b.n	80007ee <puts+0x56>
		putc(cBufferTransmit[ucCharacterCounter]);
 80007da:	7bbb      	ldrb	r3, [r7, #14]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffc6 	bl	8000774 <putc>
	for(unsigned char ucCharacterCounter = 0; cBufferTransmit[ucCharacterCounter] != NULL; ucCharacterCounter++){
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73bb      	strb	r3, [r7, #14]
 80007ee:	7bbb      	ldrb	r3, [r7, #14]
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	4413      	add	r3, r2
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d1ef      	bne.n	80007da <puts+0x42>
	}
	putc(R);
 80007fa:	200d      	movs	r0, #13
 80007fc:	f7ff ffba 	bl	8000774 <putc>
	putc(CR);
 8000800:	200a      	movs	r0, #10
 8000802:	f7ff ffb7 	bl	8000774 <putc>
	return 0;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <Token_Handler>:

void Token_Handler(){
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
	char cSuccess[10] = "BT+SCSS+";
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <Token_Handler+0x58>)
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	ca07      	ldmia	r2, {r0, r1, r2}
 800081c:	c303      	stmia	r3!, {r0, r1}
 800081e:	701a      	strb	r2, [r3, #0]
 8000820:	2300      	movs	r3, #0
 8000822:	737b      	strb	r3, [r7, #13]
	if((ui8TokenCounter>0) && (asToken[1].eType == KEYWORD)){
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <Token_Handler+0x5c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d019      	beq.n	8000860 <Token_Handler+0x50>
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <Token_Handler+0x60>)
 800082e:	7a1b      	ldrb	r3, [r3, #8]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d115      	bne.n	8000860 <Token_Handler+0x50>
		switch(asToken[1].uValue.eKeyword){
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <Token_Handler+0x60>)
 8000836:	7b1b      	ldrb	r3, [r3, #12]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d002      	beq.n	8000842 <Token_Handler+0x32>
 800083c:	2b08      	cmp	r3, #8
 800083e:	d007      	beq.n	8000850 <Token_Handler+0x40>
				}

		}
	}

}
 8000840:	e00e      	b.n	8000860 <Token_Handler+0x50>
				puts(cSuccess,sizeof(cSuccess));
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	210a      	movs	r1, #10
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ffa6 	bl	8000798 <puts>
				break;
 800084c:	bf00      	nop
}
 800084e:	e007      	b.n	8000860 <Token_Handler+0x50>
				if(asToken[2].eType == NUMBER){
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <Token_Handler+0x60>)
 8000852:	7c1b      	ldrb	r3, [r3, #16]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d103      	bne.n	8000860 <Token_Handler+0x50>
					HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000858:	2120      	movs	r1, #32
 800085a:	4806      	ldr	r0, [pc, #24]	; (8000874 <Token_Handler+0x64>)
 800085c:	f000 ff14 	bl	8001688 <HAL_GPIO_TogglePin>
}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	08004898 	.word	0x08004898
 800086c:	20000234 	.word	0x20000234
 8000870:	20000244 	.word	0x20000244
 8000874:	48000400 	.word	0x48000400

08000878 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart1,cBufferReceived,RX_FRAME);
 8000880:	2208      	movs	r2, #8
 8000882:	491d      	ldr	r1, [pc, #116]	; (80008f8 <HAL_UART_RxCpltCallback+0x80>)
 8000884:	481d      	ldr	r0, [pc, #116]	; (80008fc <HAL_UART_RxCpltCallback+0x84>)
 8000886:	f002 fb7d 	bl	8002f84 <HAL_UART_Receive_DMA>
	char cError[10] = "BT+ERRO+";
 800088a:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <HAL_UART_RxCpltCallback+0x88>)
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	ca07      	ldmia	r2, {r0, r1, r2}
 8000892:	c303      	stmia	r3!, {r0, r1}
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	2300      	movs	r3, #0
 8000898:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	char cSuccess[10] = "BT+SCSS+";
 800089c:	4a19      	ldr	r2, [pc, #100]	; (8000904 <HAL_UART_RxCpltCallback+0x8c>)
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80008a4:	c303      	stmia	r3!, {r0, r1}
 80008a6:	701a      	strb	r2, [r3, #0]
 80008a8:	2300      	movs	r3, #0
 80008aa:	767b      	strb	r3, [r7, #25]
	char cRxBegin[3];
	strncpy(cRxBegin,cBufferReceived,3);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2203      	movs	r2, #3
 80008b2:	4911      	ldr	r1, [pc, #68]	; (80008f8 <HAL_UART_RxCpltCallback+0x80>)
 80008b4:	4618      	mov	r0, r3
 80008b6:	f003 fa1e 	bl	8003cf6 <strncpy>

	if(strcmp("BT+",cRxBegin) != 0 ) {
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4619      	mov	r1, r3
 80008c0:	4811      	ldr	r0, [pc, #68]	; (8000908 <HAL_UART_RxCpltCallback+0x90>)
 80008c2:	f7ff fc8d 	bl	80001e0 <strcmp>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d006      	beq.n	80008da <HAL_UART_RxCpltCallback+0x62>
		puts(cError,sizeof(cError));
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	210a      	movs	r1, #10
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff ff60 	bl	8000798 <puts>
 80008d8:	e005      	b.n	80008e6 <HAL_UART_RxCpltCallback+0x6e>
	}
	else {
		puts(cSuccess,sizeof(cSuccess));
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	210a      	movs	r1, #10
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff59 	bl	8000798 <puts>
	}
	/*************************************/

	DecodeMsg(cBufferReceived);
 80008e6:	4804      	ldr	r0, [pc, #16]	; (80008f8 <HAL_UART_RxCpltCallback+0x80>)
 80008e8:	f7ff fdce 	bl	8000488 <DecodeMsg>
	Token_Handler();
 80008ec:	f7ff ff90 	bl	8000810 <Token_Handler>
}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	2000025c 	.word	0x2000025c
 80008fc:	200002ec 	.word	0x200002ec
 8000900:	080048a8 	.word	0x080048a8
 8000904:	08004898 	.word	0x08004898
 8000908:	080048a4 	.word	0x080048a4

0800090c <HAL_GPIO_EXTI_Callback>:


/*It is a interrupt function which is in use when robot cross the end line */
//DOIT: logic which takes a laser signal
//for tests I use a tact switch on D2 PIN
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
	char cEndOfRace[10] = "BT+ENDR+";
 8000916:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <HAL_GPIO_EXTI_Callback+0x38>)
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	ca07      	ldmia	r2, {r0, r1, r2}
 800091e:	c303      	stmia	r3!, {r0, r1}
 8000920:	701a      	strb	r2, [r3, #0]
 8000922:	2300      	movs	r3, #0
 8000924:	757b      	strb	r3, [r7, #21]
	puts(cEndOfRace,sizeof(cEndOfRace));
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	210a      	movs	r1, #10
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff33 	bl	8000798 <puts>
	HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000932:	2120      	movs	r1, #32
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000936:	f000 fea7 	bl	8001688 <HAL_GPIO_TogglePin>
	/*
	 * logic that takes a time from start gate and count the avarage time
	 */
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	080048b4 	.word	0x080048b4
 8000948:	48000400 	.word	0x48000400

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x44>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_MspInit+0x44>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6193      	str	r3, [r2, #24]
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_MspInit+0x44>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x44>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	61d3      	str	r3, [r2, #28]
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x44>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000992:	2007      	movs	r0, #7
 8000994:	f000 faa4 	bl	8000ee0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a41      	ldr	r2, [pc, #260]	; (8000ac8 <HAL_UART_MspInit+0x124>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d17b      	bne.n	8000abe <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009c6:	4b41      	ldr	r3, [pc, #260]	; (8000acc <HAL_UART_MspInit+0x128>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	4a40      	ldr	r2, [pc, #256]	; (8000acc <HAL_UART_MspInit+0x128>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6193      	str	r3, [r2, #24]
 80009d2:	4b3e      	ldr	r3, [pc, #248]	; (8000acc <HAL_UART_MspInit+0x128>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <HAL_UART_MspInit+0x128>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	4a3a      	ldr	r2, [pc, #232]	; (8000acc <HAL_UART_MspInit+0x128>)
 80009e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009e8:	6153      	str	r3, [r2, #20]
 80009ea:	4b38      	ldr	r3, [pc, #224]	; (8000acc <HAL_UART_MspInit+0x128>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009f6:	2330      	movs	r3, #48	; 0x30
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a06:	2307      	movs	r3, #7
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	482f      	ldr	r0, [pc, #188]	; (8000ad0 <HAL_UART_MspInit+0x12c>)
 8000a12:	f000 fc97 	bl	8001344 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000a16:	4b2f      	ldr	r3, [pc, #188]	; (8000ad4 <HAL_UART_MspInit+0x130>)
 8000a18:	4a2f      	ldr	r2, [pc, #188]	; (8000ad8 <HAL_UART_MspInit+0x134>)
 8000a1a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <HAL_UART_MspInit+0x130>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a22:	4b2c      	ldr	r3, [pc, #176]	; (8000ad4 <HAL_UART_MspInit+0x130>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a28:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <HAL_UART_MspInit+0x130>)
 8000a2a:	2280      	movs	r2, #128	; 0x80
 8000a2c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a2e:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <HAL_UART_MspInit+0x130>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a34:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <HAL_UART_MspInit+0x130>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a3a:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <HAL_UART_MspInit+0x130>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <HAL_UART_MspInit+0x130>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a46:	4823      	ldr	r0, [pc, #140]	; (8000ad4 <HAL_UART_MspInit+0x130>)
 8000a48:	f000 fa8b 	bl	8000f62 <HAL_DMA_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8000a52:	f7ff ff7b 	bl	800094c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <HAL_UART_MspInit+0x130>)
 8000a5a:	66da      	str	r2, [r3, #108]	; 0x6c
 8000a5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ad4 <HAL_UART_MspInit+0x130>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000a62:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <HAL_UART_MspInit+0x138>)
 8000a64:	4a1e      	ldr	r2, [pc, #120]	; (8000ae0 <HAL_UART_MspInit+0x13c>)
 8000a66:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <HAL_UART_MspInit+0x138>)
 8000a6a:	2210      	movs	r2, #16
 8000a6c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <HAL_UART_MspInit+0x138>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a74:	4b19      	ldr	r3, [pc, #100]	; (8000adc <HAL_UART_MspInit+0x138>)
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <HAL_UART_MspInit+0x138>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <HAL_UART_MspInit+0x138>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_UART_MspInit+0x138>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <HAL_UART_MspInit+0x138>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000a92:	4812      	ldr	r0, [pc, #72]	; (8000adc <HAL_UART_MspInit+0x138>)
 8000a94:	f000 fa65 	bl	8000f62 <HAL_DMA_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8000a9e:	f7ff ff55 	bl	800094c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <HAL_UART_MspInit+0x138>)
 8000aa6:	669a      	str	r2, [r3, #104]	; 0x68
 8000aa8:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <HAL_UART_MspInit+0x138>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2025      	movs	r0, #37	; 0x25
 8000ab4:	f000 fa1f 	bl	8000ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ab8:	2025      	movs	r0, #37	; 0x25
 8000aba:	f000 fa38 	bl	8000f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	; 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40013800 	.word	0x40013800
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	48000800 	.word	0x48000800
 8000ad4:	200002a8 	.word	0x200002a8
 8000ad8:	40020058 	.word	0x40020058
 8000adc:	20000264 	.word	0x20000264
 8000ae0:	40020044 	.word	0x40020044

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <MemManage_Handler+0x4>

08000afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b38:	f000 f8e2 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <DMA1_Channel4_IRQHandler+0x10>)
 8000b46:	f000 faf0 	bl	800112a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000264 	.word	0x20000264

08000b54 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <DMA1_Channel5_IRQHandler+0x10>)
 8000b5a:	f000 fae6 	bl	800112a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200002a8 	.word	0x200002a8

08000b68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <USART1_IRQHandler+0x10>)
 8000b6e:	f002 fa8d 	bl	800308c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200002ec 	.word	0x200002ec

08000b7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000b80:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b84:	f000 fd9a 	bl	80016bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000b88:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b8c:	f000 fd96 	bl	80016bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b94:	f000 fd92 	bl	80016bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <_sbrk+0x50>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x16>
		heap_end = &end;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <_sbrk+0x50>)
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <_sbrk+0x54>)
 8000bb0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <_sbrk+0x50>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <_sbrk+0x50>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	466a      	mov	r2, sp
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d907      	bls.n	8000bd6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000bc6:	f003 f82b 	bl	8003c20 <__errno>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	230c      	movs	r3, #12
 8000bce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd4:	e006      	b.n	8000be4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <_sbrk+0x50>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a03      	ldr	r2, [pc, #12]	; (8000bec <_sbrk+0x50>)
 8000be0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000238 	.word	0x20000238
 8000bf0:	20000378 	.word	0x20000378

08000bf4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <SystemInit+0x28>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfe:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <SystemInit+0x28>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <SystemInit+0x28>)
 8000c0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c26:	e003      	b.n	8000c30 <LoopCopyDataInit>

08000c28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c2e:	3104      	adds	r1, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c30:	480b      	ldr	r0, [pc, #44]	; (8000c60 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c38:	d3f6      	bcc.n	8000c28 <CopyDataInit>
	ldr	r2, =_sbss
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c3c:	e002      	b.n	8000c44 <LoopFillZerobss>

08000c3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c40:	f842 3b04 	str.w	r3, [r2], #4

08000c44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <LoopForever+0x16>)
	cmp	r2, r3
 8000c46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c48:	d3f9      	bcc.n	8000c3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c4a:	f7ff ffd3 	bl	8000bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f002 ffed 	bl	8003c2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c52:	f7ff fc31 	bl	80004b8 <main>

08000c56 <LoopForever>:

LoopForever:
    b LoopForever
 8000c56:	e7fe      	b.n	8000c56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c58:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000c5c:	08004a98 	.word	0x08004a98
	ldr	r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c64:	20000218 	.word	0x20000218
	ldr	r2, =_sbss
 8000c68:	20000218 	.word	0x20000218
	ldr	r3, = _ebss
 8000c6c:	20000374 	.word	0x20000374

08000c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC1_2_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_Init+0x28>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_Init+0x28>)
 8000c7e:	f043 0310 	orr.w	r3, r3, #16
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f92b 	bl	8000ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f000 f808 	bl	8000ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff fe64 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40022000 	.word	0x40022000

08000ca0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x54>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x58>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f943 	bl	8000f4a <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00e      	b.n	8000cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d80a      	bhi.n	8000cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f000 f90b 	bl	8000ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <HAL_InitTick+0x5c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	2000003c 	.word	0x2000003c
 8000cf8:	20000044 	.word	0x20000044
 8000cfc:	20000040 	.word	0x20000040

08000d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000044 	.word	0x20000044
 8000d24:	2000036c 	.word	0x2000036c

08000d28 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	2000036c 	.word	0x2000036c

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db0b      	blt.n	8000dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f003 021f 	and.w	r2, r3, #31
 8000dbc:	4907      	ldr	r1, [pc, #28]	; (8000ddc <__NVIC_EnableIRQ+0x38>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	; (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	; (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eac:	d301      	bcc.n	8000eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00f      	b.n	8000ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <SysTick_Config+0x40>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eba:	210f      	movs	r1, #15
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f7ff ff8e 	bl	8000de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <SysTick_Config+0x40>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eca:	4b04      	ldr	r3, [pc, #16]	; (8000edc <SysTick_Config+0x40>)
 8000ecc:	2207      	movs	r2, #7
 8000ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	e000e010 	.word	0xe000e010

08000ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff29 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f08:	f7ff ff3e 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	f7ff ff8e 	bl	8000e34 <NVIC_EncodePriority>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff5d 	bl	8000de0 <__NVIC_SetPriority>
}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff31 	bl	8000da4 <__NVIC_EnableIRQ>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffa2 	bl	8000e9c <SysTick_Config>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e037      	b.n	8000fe8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f97e 	bl	80012cc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}  
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d101      	bne.n	8001010 <HAL_DMA_Start_IT+0x20>
 800100c:	2302      	movs	r3, #2
 800100e:	e04a      	b.n	80010a6 <HAL_DMA_Start_IT+0xb6>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2201      	movs	r2, #1
 8001014:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800101e:	2b01      	cmp	r3, #1
 8001020:	d13a      	bne.n	8001098 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2202      	movs	r2, #2
 8001026:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2200      	movs	r2, #0
 800102e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0201 	bic.w	r2, r2, #1
 800103e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f000 f912 	bl	8001270 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001050:	2b00      	cmp	r3, #0
 8001052:	d008      	beq.n	8001066 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 020e 	orr.w	r2, r2, #14
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	e00f      	b.n	8001086 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 020a 	orr.w	r2, r2, #10
 8001074:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0204 	bic.w	r2, r2, #4
 8001084:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f042 0201 	orr.w	r2, r2, #1
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	e005      	b.n	80010a4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80010a0:	2302      	movs	r3, #2
 80010a2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
} 
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b084      	sub	sp, #16
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d005      	beq.n	80010d0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2204      	movs	r2, #4
 80010c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	e027      	b.n	8001120 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 020e 	bic.w	r2, r2, #14
 80010de:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0201 	bic.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f8:	2101      	movs	r1, #1
 80010fa:	fa01 f202 	lsl.w	r2, r1, r2
 80010fe:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	4798      	blx	r3
    } 
  }
  return status;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	2204      	movs	r2, #4
 8001148:	409a      	lsls	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d024      	beq.n	800119c <HAL_DMA_IRQHandler+0x72>
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b00      	cmp	r3, #0
 800115a:	d01f      	beq.n	800119c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	2b00      	cmp	r3, #0
 8001168:	d107      	bne.n	800117a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0204 	bic.w	r2, r2, #4
 8001178:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001182:	2104      	movs	r1, #4
 8001184:	fa01 f202 	lsl.w	r2, r1, r2
 8001188:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118e:	2b00      	cmp	r3, #0
 8001190:	d06a      	beq.n	8001268 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800119a:	e065      	b.n	8001268 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	2202      	movs	r2, #2
 80011a2:	409a      	lsls	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4013      	ands	r3, r2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d02c      	beq.n	8001206 <HAL_DMA_IRQHandler+0xdc>
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d027      	beq.n	8001206 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0320 	and.w	r3, r3, #32
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10b      	bne.n	80011dc <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 020a 	bic.w	r2, r2, #10
 80011d2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e4:	2102      	movs	r1, #2
 80011e6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ea:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d035      	beq.n	8001268 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001204:	e030      	b.n	8001268 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	2208      	movs	r2, #8
 800120c:	409a      	lsls	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4013      	ands	r3, r2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d028      	beq.n	8001268 <HAL_DMA_IRQHandler+0x13e>
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	2b00      	cmp	r3, #0
 800121e:	d023      	beq.n	8001268 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 020e 	bic.w	r2, r2, #14
 800122e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001238:	2101      	movs	r1, #1
 800123a:	fa01 f202 	lsl.w	r2, r1, r2
 800123e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2201      	movs	r2, #1
 800124a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	2b00      	cmp	r3, #0
 800125c:	d004      	beq.n	8001268 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	4798      	blx	r3
    }
  }
}  
 8001266:	e7ff      	b.n	8001268 <HAL_DMA_IRQHandler+0x13e>
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001286:	2101      	movs	r1, #1
 8001288:	fa01 f202 	lsl.w	r2, r1, r2
 800128c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b10      	cmp	r3, #16
 800129c:	d108      	bne.n	80012b0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012ae:	e007      	b.n	80012c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	60da      	str	r2, [r3, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <DMA_CalcBaseAndBitshift+0x60>)
 80012dc:	429a      	cmp	r2, r3
 80012de:	d80f      	bhi.n	8001300 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <DMA_CalcBaseAndBitshift+0x64>)
 80012e8:	4413      	add	r3, r2
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <DMA_CalcBaseAndBitshift+0x68>)
 80012ec:	fba2 2303 	umull	r2, r3, r2, r3
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	009a      	lsls	r2, r3, #2
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <DMA_CalcBaseAndBitshift+0x6c>)
 80012fc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80012fe:	e00e      	b.n	800131e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <DMA_CalcBaseAndBitshift+0x70>)
 8001308:	4413      	add	r3, r2
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <DMA_CalcBaseAndBitshift+0x68>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	009a      	lsls	r2, r3, #2
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a09      	ldr	r2, [pc, #36]	; (8001340 <DMA_CalcBaseAndBitshift+0x74>)
 800131c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40020407 	.word	0x40020407
 8001330:	bffdfff8 	.word	0xbffdfff8
 8001334:	cccccccd 	.word	0xcccccccd
 8001338:	40020000 	.word	0x40020000
 800133c:	bffdfbf8 	.word	0xbffdfbf8
 8001340:	40020400 	.word	0x40020400

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001352:	e160      	b.n	8001616 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2101      	movs	r1, #1
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 8152 	beq.w	8001610 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x38>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b12      	cmp	r3, #18
 800137a:	d123      	bne.n	80013c4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	08da      	lsrs	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3208      	adds	r2, #8
 8001384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	6939      	ldr	r1, [r7, #16]
 80013c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0203 	and.w	r2, r3, #3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d00b      	beq.n	8001418 <HAL_GPIO_Init+0xd4>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d007      	beq.n	8001418 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800140c:	2b11      	cmp	r3, #17
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b12      	cmp	r3, #18
 8001416:	d130      	bne.n	800147a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800144e:	2201      	movs	r2, #1
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	f003 0201 	and.w	r2, r3, #1
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	2203      	movs	r2, #3
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 80ac 	beq.w	8001610 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b8:	4b5e      	ldr	r3, [pc, #376]	; (8001634 <HAL_GPIO_Init+0x2f0>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a5d      	ldr	r2, [pc, #372]	; (8001634 <HAL_GPIO_Init+0x2f0>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b5b      	ldr	r3, [pc, #364]	; (8001634 <HAL_GPIO_Init+0x2f0>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014d0:	4a59      	ldr	r2, [pc, #356]	; (8001638 <HAL_GPIO_Init+0x2f4>)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	3302      	adds	r3, #2
 80014d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	220f      	movs	r2, #15
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014fa:	d025      	beq.n	8001548 <HAL_GPIO_Init+0x204>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a4f      	ldr	r2, [pc, #316]	; (800163c <HAL_GPIO_Init+0x2f8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d01f      	beq.n	8001544 <HAL_GPIO_Init+0x200>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a4e      	ldr	r2, [pc, #312]	; (8001640 <HAL_GPIO_Init+0x2fc>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d019      	beq.n	8001540 <HAL_GPIO_Init+0x1fc>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a4d      	ldr	r2, [pc, #308]	; (8001644 <HAL_GPIO_Init+0x300>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d013      	beq.n	800153c <HAL_GPIO_Init+0x1f8>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a4c      	ldr	r2, [pc, #304]	; (8001648 <HAL_GPIO_Init+0x304>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d00d      	beq.n	8001538 <HAL_GPIO_Init+0x1f4>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a4b      	ldr	r2, [pc, #300]	; (800164c <HAL_GPIO_Init+0x308>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d007      	beq.n	8001534 <HAL_GPIO_Init+0x1f0>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a4a      	ldr	r2, [pc, #296]	; (8001650 <HAL_GPIO_Init+0x30c>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d101      	bne.n	8001530 <HAL_GPIO_Init+0x1ec>
 800152c:	2306      	movs	r3, #6
 800152e:	e00c      	b.n	800154a <HAL_GPIO_Init+0x206>
 8001530:	2307      	movs	r3, #7
 8001532:	e00a      	b.n	800154a <HAL_GPIO_Init+0x206>
 8001534:	2305      	movs	r3, #5
 8001536:	e008      	b.n	800154a <HAL_GPIO_Init+0x206>
 8001538:	2304      	movs	r3, #4
 800153a:	e006      	b.n	800154a <HAL_GPIO_Init+0x206>
 800153c:	2303      	movs	r3, #3
 800153e:	e004      	b.n	800154a <HAL_GPIO_Init+0x206>
 8001540:	2302      	movs	r3, #2
 8001542:	e002      	b.n	800154a <HAL_GPIO_Init+0x206>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_GPIO_Init+0x206>
 8001548:	2300      	movs	r3, #0
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	f002 0203 	and.w	r2, r2, #3
 8001550:	0092      	lsls	r2, r2, #2
 8001552:	4093      	lsls	r3, r2
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800155a:	4937      	ldr	r1, [pc, #220]	; (8001638 <HAL_GPIO_Init+0x2f4>)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001568:	4b3a      	ldr	r3, [pc, #232]	; (8001654 <HAL_GPIO_Init+0x310>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800158c:	4a31      	ldr	r2, [pc, #196]	; (8001654 <HAL_GPIO_Init+0x310>)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001592:	4b30      	ldr	r3, [pc, #192]	; (8001654 <HAL_GPIO_Init+0x310>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015b6:	4a27      	ldr	r2, [pc, #156]	; (8001654 <HAL_GPIO_Init+0x310>)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015bc:	4b25      	ldr	r3, [pc, #148]	; (8001654 <HAL_GPIO_Init+0x310>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015e0:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <HAL_GPIO_Init+0x310>)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e6:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <HAL_GPIO_Init+0x310>)
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800160a:	4a12      	ldr	r2, [pc, #72]	; (8001654 <HAL_GPIO_Init+0x310>)
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3301      	adds	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	f47f ae97 	bne.w	8001354 <HAL_GPIO_Init+0x10>
  }
}
 8001626:	bf00      	nop
 8001628:	371c      	adds	r7, #28
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	40010000 	.word	0x40010000
 800163c:	48000400 	.word	0x48000400
 8001640:	48000800 	.word	0x48000800
 8001644:	48000c00 	.word	0x48000c00
 8001648:	48001000 	.word	0x48001000
 800164c:	48001400 	.word	0x48001400
 8001650:	48001800 	.word	0x48001800
 8001654:	40010400 	.word	0x40010400

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001674:	e002      	b.n	800167c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001676:	887a      	ldrh	r2, [r7, #2]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d004      	beq.n	80016aa <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016a0:	887b      	ldrh	r3, [r7, #2]
 80016a2:	041a      	lsls	r2, r3, #16
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80016a8:	e002      	b.n	80016b0 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016aa:	887a      	ldrh	r2, [r7, #2]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	619a      	str	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	4013      	ands	r3, r2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d006      	beq.n	80016e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f916 	bl	800090c <HAL_GPIO_EXTI_Callback>
  }
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40010400 	.word	0x40010400

080016ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	f000 bf01 	b.w	8002508 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 8160 	beq.w	80019d6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001716:	4bae      	ldr	r3, [pc, #696]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b04      	cmp	r3, #4
 8001720:	d00c      	beq.n	800173c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001722:	4bab      	ldr	r3, [pc, #684]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b08      	cmp	r3, #8
 800172c:	d159      	bne.n	80017e2 <HAL_RCC_OscConfig+0xf6>
 800172e:	4ba8      	ldr	r3, [pc, #672]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173a:	d152      	bne.n	80017e2 <HAL_RCC_OscConfig+0xf6>
 800173c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001740:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001748:	fa93 f3a3 	rbit	r3, r3
 800174c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001750:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001754:	fab3 f383 	clz	r3, r3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d102      	bne.n	800176e <HAL_RCC_OscConfig+0x82>
 8001768:	4b99      	ldr	r3, [pc, #612]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	e015      	b.n	800179a <HAL_RCC_OscConfig+0xae>
 800176e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001772:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001776:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800177a:	fa93 f3a3 	rbit	r3, r3
 800177e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001782:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001786:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800178a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800178e:	fa93 f3a3 	rbit	r3, r3
 8001792:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001796:	4b8e      	ldr	r3, [pc, #568]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800179e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80017a2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80017a6:	fa92 f2a2 	rbit	r2, r2
 80017aa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80017ae:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80017b2:	fab2 f282 	clz	r2, r2
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	f042 0220 	orr.w	r2, r2, #32
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	f002 021f 	and.w	r2, r2, #31
 80017c2:	2101      	movs	r1, #1
 80017c4:	fa01 f202 	lsl.w	r2, r1, r2
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 8102 	beq.w	80019d4 <HAL_RCC_OscConfig+0x2e8>
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f040 80fc 	bne.w	80019d4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	f000 be93 	b.w	8002508 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ec:	d106      	bne.n	80017fc <HAL_RCC_OscConfig+0x110>
 80017ee:	4b78      	ldr	r3, [pc, #480]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a77      	ldr	r2, [pc, #476]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e030      	b.n	800185e <HAL_RCC_OscConfig+0x172>
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x134>
 8001806:	4b72      	ldr	r3, [pc, #456]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a71      	ldr	r2, [pc, #452]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 800180c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b6f      	ldr	r3, [pc, #444]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6e      	ldr	r2, [pc, #440]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 8001818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e01e      	b.n	800185e <HAL_RCC_OscConfig+0x172>
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800182a:	d10c      	bne.n	8001846 <HAL_RCC_OscConfig+0x15a>
 800182c:	4b68      	ldr	r3, [pc, #416]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a67      	ldr	r2, [pc, #412]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 8001832:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b65      	ldr	r3, [pc, #404]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a64      	ldr	r2, [pc, #400]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 800183e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	e00b      	b.n	800185e <HAL_RCC_OscConfig+0x172>
 8001846:	4b62      	ldr	r3, [pc, #392]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a61      	ldr	r2, [pc, #388]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 800184c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b5f      	ldr	r3, [pc, #380]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a5e      	ldr	r2, [pc, #376]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 8001858:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d059      	beq.n	800191c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fa5e 	bl	8000d28 <HAL_GetTick>
 800186c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001870:	e00a      	b.n	8001888 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001872:	f7ff fa59 	bl	8000d28 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	; 0x64
 8001880:	d902      	bls.n	8001888 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	f000 be40 	b.w	8002508 <HAL_RCC_OscConfig+0xe1c>
 8001888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800188c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800189c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d102      	bne.n	80018ba <HAL_RCC_OscConfig+0x1ce>
 80018b4:	4b46      	ldr	r3, [pc, #280]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	e015      	b.n	80018e6 <HAL_RCC_OscConfig+0x1fa>
 80018ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018be:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80018ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018d2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80018d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80018e2:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ea:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80018ee:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80018f2:	fa92 f2a2 	rbit	r2, r2
 80018f6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80018fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80018fe:	fab2 f282 	clz	r2, r2
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	f042 0220 	orr.w	r2, r2, #32
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	f002 021f 	and.w	r2, r2, #31
 800190e:	2101      	movs	r1, #1
 8001910:	fa01 f202 	lsl.w	r2, r1, r2
 8001914:	4013      	ands	r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0ab      	beq.n	8001872 <HAL_RCC_OscConfig+0x186>
 800191a:	e05c      	b.n	80019d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fa04 	bl	8000d28 <HAL_GetTick>
 8001920:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001924:	e00a      	b.n	800193c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001926:	f7ff f9ff 	bl	8000d28 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d902      	bls.n	800193c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	f000 bde6 	b.w	8002508 <HAL_RCC_OscConfig+0xe1c>
 800193c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001940:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001948:	fa93 f3a3 	rbit	r3, r3
 800194c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001950:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	b2db      	uxtb	r3, r3
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d102      	bne.n	800196e <HAL_RCC_OscConfig+0x282>
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	e015      	b.n	800199a <HAL_RCC_OscConfig+0x2ae>
 800196e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001972:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001982:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001986:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800198a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800198e:	fa93 f3a3 	rbit	r3, r3
 8001992:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <HAL_RCC_OscConfig+0x2e4>)
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800199e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80019a2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80019a6:	fa92 f2a2 	rbit	r2, r2
 80019aa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80019ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80019b2:	fab2 f282 	clz	r2, r2
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	f042 0220 	orr.w	r2, r2, #32
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	f002 021f 	and.w	r2, r2, #31
 80019c2:	2101      	movs	r1, #1
 80019c4:	fa01 f202 	lsl.w	r2, r1, r2
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1ab      	bne.n	8001926 <HAL_RCC_OscConfig+0x23a>
 80019ce:	e002      	b.n	80019d6 <HAL_RCC_OscConfig+0x2ea>
 80019d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 8170 	beq.w	8001cc6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019e6:	4bd0      	ldr	r3, [pc, #832]	; (8001d28 <HAL_RCC_OscConfig+0x63c>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00c      	beq.n	8001a0c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019f2:	4bcd      	ldr	r3, [pc, #820]	; (8001d28 <HAL_RCC_OscConfig+0x63c>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d16d      	bne.n	8001ada <HAL_RCC_OscConfig+0x3ee>
 80019fe:	4bca      	ldr	r3, [pc, #808]	; (8001d28 <HAL_RCC_OscConfig+0x63c>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a0a:	d166      	bne.n	8001ada <HAL_RCC_OscConfig+0x3ee>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a12:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001a1e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a22:	fab3 f383 	clz	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	095b      	lsrs	r3, r3, #5
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d102      	bne.n	8001a3c <HAL_RCC_OscConfig+0x350>
 8001a36:	4bbc      	ldr	r3, [pc, #752]	; (8001d28 <HAL_RCC_OscConfig+0x63c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	e013      	b.n	8001a64 <HAL_RCC_OscConfig+0x378>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001a46:	fa93 f3a3 	rbit	r3, r3
 8001a4a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001a4e:	2302      	movs	r3, #2
 8001a50:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a54:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001a58:	fa93 f3a3 	rbit	r3, r3
 8001a5c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a60:	4bb1      	ldr	r3, [pc, #708]	; (8001d28 <HAL_RCC_OscConfig+0x63c>)
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	2202      	movs	r2, #2
 8001a66:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001a6a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001a6e:	fa92 f2a2 	rbit	r2, r2
 8001a72:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001a76:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a7a:	fab2 f282 	clz	r2, r2
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	f042 0220 	orr.w	r2, r2, #32
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	f002 021f 	and.w	r2, r2, #31
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d007      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x3ba>
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d002      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f000 bd31 	b.w	8002508 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa6:	4ba0      	ldr	r3, [pc, #640]	; (8001d28 <HAL_RCC_OscConfig+0x63c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	21f8      	movs	r1, #248	; 0xf8
 8001ab6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001abe:	fa91 f1a1 	rbit	r1, r1
 8001ac2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001ac6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001aca:	fab1 f181 	clz	r1, r1
 8001ace:	b2c9      	uxtb	r1, r1
 8001ad0:	408b      	lsls	r3, r1
 8001ad2:	4995      	ldr	r1, [pc, #596]	; (8001d28 <HAL_RCC_OscConfig+0x63c>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad8:	e0f5      	b.n	8001cc6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 8085 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x504>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001af8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	2301      	movs	r3, #1
 8001b10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff f909 	bl	8000d28 <HAL_GetTick>
 8001b16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b1c:	f7ff f904 	bl	8000d28 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d902      	bls.n	8001b32 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	f000 bceb 	b.w	8002508 <HAL_RCC_OscConfig+0xe1c>
 8001b32:	2302      	movs	r3, #2
 8001b34:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001b44:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d102      	bne.n	8001b62 <HAL_RCC_OscConfig+0x476>
 8001b5c:	4b72      	ldr	r3, [pc, #456]	; (8001d28 <HAL_RCC_OscConfig+0x63c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	e013      	b.n	8001b8a <HAL_RCC_OscConfig+0x49e>
 8001b62:	2302      	movs	r3, #2
 8001b64:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001b6c:	fa93 f3a3 	rbit	r3, r3
 8001b70:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001b74:	2302      	movs	r3, #2
 8001b76:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b7a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b86:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <HAL_RCC_OscConfig+0x63c>)
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001b90:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001b94:	fa92 f2a2 	rbit	r2, r2
 8001b98:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001b9c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ba0:	fab2 f282 	clz	r2, r2
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	f042 0220 	orr.w	r2, r2, #32
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	f002 021f 	and.w	r2, r2, #31
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0af      	beq.n	8001b1c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbc:	4b5a      	ldr	r3, [pc, #360]	; (8001d28 <HAL_RCC_OscConfig+0x63c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	21f8      	movs	r1, #248	; 0xf8
 8001bcc:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001bd4:	fa91 f1a1 	rbit	r1, r1
 8001bd8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001bdc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001be0:	fab1 f181 	clz	r1, r1
 8001be4:	b2c9      	uxtb	r1, r1
 8001be6:	408b      	lsls	r3, r1
 8001be8:	494f      	ldr	r1, [pc, #316]	; (8001d28 <HAL_RCC_OscConfig+0x63c>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
 8001bee:	e06a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x5da>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001c02:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	461a      	mov	r2, r3
 8001c18:	2300      	movs	r3, #0
 8001c1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff f884 	bl	8000d28 <HAL_GetTick>
 8001c20:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c26:	f7ff f87f 	bl	8000d28 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d902      	bls.n	8001c3c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	f000 bc66 	b.w	8002508 <HAL_RCC_OscConfig+0xe1c>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001c4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	095b      	lsrs	r3, r3, #5
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d102      	bne.n	8001c6c <HAL_RCC_OscConfig+0x580>
 8001c66:	4b30      	ldr	r3, [pc, #192]	; (8001d28 <HAL_RCC_OscConfig+0x63c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	e013      	b.n	8001c94 <HAL_RCC_OscConfig+0x5a8>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001c7e:	2302      	movs	r3, #2
 8001c80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c84:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <HAL_RCC_OscConfig+0x63c>)
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	2202      	movs	r2, #2
 8001c96:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001c9a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001c9e:	fa92 f2a2 	rbit	r2, r2
 8001ca2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001ca6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001caa:	fab2 f282 	clz	r2, r2
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	f042 0220 	orr.w	r2, r2, #32
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	f002 021f 	and.w	r2, r2, #31
 8001cba:	2101      	movs	r1, #1
 8001cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1af      	bne.n	8001c26 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80da 	beq.w	8001e8a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d069      	beq.n	8001db4 <HAL_RCC_OscConfig+0x6c8>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001cf2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_OscConfig+0x640>)
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	461a      	mov	r2, r3
 8001d06:	2301      	movs	r3, #1
 8001d08:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff f80d 	bl	8000d28 <HAL_GetTick>
 8001d0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	e00d      	b.n	8001d30 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d14:	f7ff f808 	bl	8000d28 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d905      	bls.n	8001d30 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e3ef      	b.n	8002508 <HAL_RCC_OscConfig+0xe1c>
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	10908120 	.word	0x10908120
 8001d30:	2302      	movs	r3, #2
 8001d32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001d3a:	fa93 f2a3 	rbit	r2, r3
 8001d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001d48:	2202      	movs	r2, #2
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	fa93 f2a3 	rbit	r2, r3
 8001d56:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001d60:	2202      	movs	r2, #2
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	fa93 f2a3 	rbit	r2, r3
 8001d6e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d74:	4ba4      	ldr	r3, [pc, #656]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d78:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	6019      	str	r1, [r3, #0]
 8001d80:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	fa93 f1a3 	rbit	r1, r3
 8001d8a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d8e:	6019      	str	r1, [r3, #0]
  return result;
 8001d90:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	2101      	movs	r1, #1
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0b0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x628>
 8001db2:	e06a      	b.n	8001e8a <HAL_RCC_OscConfig+0x79e>
 8001db4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	fa93 f2a3 	rbit	r2, r3
 8001dc6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001dca:	601a      	str	r2, [r3, #0]
  return result;
 8001dcc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001dd0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b8c      	ldr	r3, [pc, #560]	; (800200c <HAL_RCC_OscConfig+0x920>)
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	461a      	mov	r2, r3
 8001de2:	2300      	movs	r3, #0
 8001de4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7fe ff9f 	bl	8000d28 <HAL_GetTick>
 8001dea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dee:	e009      	b.n	8001e04 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df0:	f7fe ff9a 	bl	8000d28 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e381      	b.n	8002508 <HAL_RCC_OscConfig+0xe1c>
 8001e04:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e08:	2202      	movs	r2, #2
 8001e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	fa93 f2a3 	rbit	r2, r3
 8001e16:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e20:	2202      	movs	r2, #2
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	fa93 f2a3 	rbit	r2, r3
 8001e2e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e38:	2202      	movs	r2, #2
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	fa93 f2a3 	rbit	r2, r3
 8001e46:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e4a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e4c:	4b6e      	ldr	r3, [pc, #440]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e54:	2102      	movs	r1, #2
 8001e56:	6019      	str	r1, [r3, #0]
 8001e58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	fa93 f1a3 	rbit	r1, r3
 8001e62:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e66:	6019      	str	r1, [r3, #0]
  return result;
 8001e68:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	2101      	movs	r1, #1
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1b2      	bne.n	8001df0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 8157 	beq.w	8002148 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea0:	4b59      	ldr	r3, [pc, #356]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d112      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eac:	4b56      	ldr	r3, [pc, #344]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	4a55      	ldr	r2, [pc, #340]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	61d3      	str	r3, [r2, #28]
 8001eb8:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ec0:	f107 030c 	add.w	r3, r7, #12
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b4f      	ldr	r3, [pc, #316]	; (8002010 <HAL_RCC_OscConfig+0x924>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d11a      	bne.n	8001f14 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ede:	4b4c      	ldr	r3, [pc, #304]	; (8002010 <HAL_RCC_OscConfig+0x924>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a4b      	ldr	r2, [pc, #300]	; (8002010 <HAL_RCC_OscConfig+0x924>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eea:	f7fe ff1d 	bl	8000d28 <HAL_GetTick>
 8001eee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef2:	e009      	b.n	8001f08 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef4:	f7fe ff18 	bl	8000d28 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b64      	cmp	r3, #100	; 0x64
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e2ff      	b.n	8002508 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	4b41      	ldr	r3, [pc, #260]	; (8002010 <HAL_RCC_OscConfig+0x924>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0ef      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d106      	bne.n	8001f2c <HAL_RCC_OscConfig+0x840>
 8001f1e:	4b3a      	ldr	r3, [pc, #232]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a39      	ldr	r2, [pc, #228]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6213      	str	r3, [r2, #32]
 8001f2a:	e02f      	b.n	8001f8c <HAL_RCC_OscConfig+0x8a0>
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x864>
 8001f36:	4b34      	ldr	r3, [pc, #208]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a33      	ldr	r2, [pc, #204]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6213      	str	r3, [r2, #32]
 8001f42:	4b31      	ldr	r3, [pc, #196]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4a30      	ldr	r2, [pc, #192]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001f48:	f023 0304 	bic.w	r3, r3, #4
 8001f4c:	6213      	str	r3, [r2, #32]
 8001f4e:	e01d      	b.n	8001f8c <HAL_RCC_OscConfig+0x8a0>
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b05      	cmp	r3, #5
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x888>
 8001f5a:	4b2b      	ldr	r3, [pc, #172]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4a2a      	ldr	r2, [pc, #168]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	6213      	str	r3, [r2, #32]
 8001f66:	4b28      	ldr	r3, [pc, #160]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a27      	ldr	r2, [pc, #156]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6213      	str	r3, [r2, #32]
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0x8a0>
 8001f74:	4b24      	ldr	r3, [pc, #144]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4a23      	ldr	r2, [pc, #140]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	6213      	str	r3, [r2, #32]
 8001f80:	4b21      	ldr	r3, [pc, #132]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4a20      	ldr	r2, [pc, #128]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8001f86:	f023 0304 	bic.w	r3, r3, #4
 8001f8a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d06a      	beq.n	800206c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f96:	f7fe fec7 	bl	8000d28 <HAL_GetTick>
 8001f9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7fe fec2 	bl	8000d28 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e2a7      	b.n	8002508 <HAL_RCC_OscConfig+0xe1c>
 8001fb8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f2a3 	rbit	r2, r3
 8001fca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	fa93 f2a3 	rbit	r2, r3
 8001fe2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001fe6:	601a      	str	r2, [r3, #0]
  return result;
 8001fe8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001fec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d108      	bne.n	8002014 <HAL_RCC_OscConfig+0x928>
 8002002:	4b01      	ldr	r3, [pc, #4]	; (8002008 <HAL_RCC_OscConfig+0x91c>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	e013      	b.n	8002030 <HAL_RCC_OscConfig+0x944>
 8002008:	40021000 	.word	0x40021000
 800200c:	10908120 	.word	0x10908120
 8002010:	40007000 	.word	0x40007000
 8002014:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002018:	2202      	movs	r2, #2
 800201a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	fa93 f2a3 	rbit	r2, r3
 8002026:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	4bc0      	ldr	r3, [pc, #768]	; (8002330 <HAL_RCC_OscConfig+0xc44>)
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002034:	2102      	movs	r1, #2
 8002036:	6011      	str	r1, [r2, #0]
 8002038:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	fa92 f1a2 	rbit	r1, r2
 8002042:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002046:	6011      	str	r1, [r2, #0]
  return result;
 8002048:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	fab2 f282 	clz	r2, r2
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	f002 021f 	and.w	r2, r2, #31
 800205e:	2101      	movs	r1, #1
 8002060:	fa01 f202 	lsl.w	r2, r1, r2
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d09a      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x8b4>
 800206a:	e063      	b.n	8002134 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206c:	f7fe fe5c 	bl	8000d28 <HAL_GetTick>
 8002070:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002074:	e00b      	b.n	800208e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7fe fe57 	bl	8000d28 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	; 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e23c      	b.n	8002508 <HAL_RCC_OscConfig+0xe1c>
 800208e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002092:	2202      	movs	r2, #2
 8002094:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	fa93 f2a3 	rbit	r2, r3
 80020a0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020aa:	2202      	movs	r2, #2
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	fa93 f2a3 	rbit	r2, r3
 80020b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020bc:	601a      	str	r2, [r3, #0]
  return result;
 80020be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f043 0302 	orr.w	r3, r3, #2
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d102      	bne.n	80020de <HAL_RCC_OscConfig+0x9f2>
 80020d8:	4b95      	ldr	r3, [pc, #596]	; (8002330 <HAL_RCC_OscConfig+0xc44>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	e00d      	b.n	80020fa <HAL_RCC_OscConfig+0xa0e>
 80020de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020e2:	2202      	movs	r2, #2
 80020e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	fa93 f2a3 	rbit	r2, r3
 80020f0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	4b8e      	ldr	r3, [pc, #568]	; (8002330 <HAL_RCC_OscConfig+0xc44>)
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80020fe:	2102      	movs	r1, #2
 8002100:	6011      	str	r1, [r2, #0]
 8002102:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	fa92 f1a2 	rbit	r1, r2
 800210c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002110:	6011      	str	r1, [r2, #0]
  return result;
 8002112:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	fab2 f282 	clz	r2, r2
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	f002 021f 	and.w	r2, r2, #31
 8002128:	2101      	movs	r1, #1
 800212a:	fa01 f202 	lsl.w	r2, r1, r2
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1a0      	bne.n	8002076 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002134:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002138:	2b01      	cmp	r3, #1
 800213a:	d105      	bne.n	8002148 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800213c:	4b7c      	ldr	r3, [pc, #496]	; (8002330 <HAL_RCC_OscConfig+0xc44>)
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	4a7b      	ldr	r2, [pc, #492]	; (8002330 <HAL_RCC_OscConfig+0xc44>)
 8002142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002146:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 81d9 	beq.w	8002506 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002154:	4b76      	ldr	r3, [pc, #472]	; (8002330 <HAL_RCC_OscConfig+0xc44>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	2b08      	cmp	r3, #8
 800215e:	f000 81a6 	beq.w	80024ae <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	2b02      	cmp	r3, #2
 800216a:	f040 811e 	bne.w	80023aa <HAL_RCC_OscConfig+0xcbe>
 800216e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002172:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	fa93 f2a3 	rbit	r2, r3
 8002182:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002186:	601a      	str	r2, [r3, #0]
  return result;
 8002188:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800218c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002198:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	461a      	mov	r2, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7fe fdc0 	bl	8000d28 <HAL_GetTick>
 80021a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ac:	e009      	b.n	80021c2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ae:	f7fe fdbb 	bl	8000d28 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e1a2      	b.n	8002508 <HAL_RCC_OscConfig+0xe1c>
 80021c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	fa93 f2a3 	rbit	r2, r3
 80021d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80021da:	601a      	str	r2, [r3, #0]
  return result;
 80021dc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80021e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d102      	bne.n	80021fc <HAL_RCC_OscConfig+0xb10>
 80021f6:	4b4e      	ldr	r3, [pc, #312]	; (8002330 <HAL_RCC_OscConfig+0xc44>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	e01b      	b.n	8002234 <HAL_RCC_OscConfig+0xb48>
 80021fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002200:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002204:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	fa93 f2a3 	rbit	r2, r3
 8002210:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800221a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	fa93 f2a3 	rbit	r2, r3
 800222a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <HAL_RCC_OscConfig+0xc44>)
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002238:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800223c:	6011      	str	r1, [r2, #0]
 800223e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	fa92 f1a2 	rbit	r1, r2
 8002248:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800224c:	6011      	str	r1, [r2, #0]
  return result;
 800224e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	fab2 f282 	clz	r2, r2
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	f042 0220 	orr.w	r2, r2, #32
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	f002 021f 	and.w	r2, r2, #31
 8002264:	2101      	movs	r1, #1
 8002266:	fa01 f202 	lsl.w	r2, r1, r2
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d19e      	bne.n	80021ae <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002270:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <HAL_RCC_OscConfig+0xc44>)
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	f023 020f 	bic.w	r2, r3, #15
 8002278:	1d3b      	adds	r3, r7, #4
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	492c      	ldr	r1, [pc, #176]	; (8002330 <HAL_RCC_OscConfig+0xc44>)
 8002280:	4313      	orrs	r3, r2
 8002282:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002284:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <HAL_RCC_OscConfig+0xc44>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6a19      	ldr	r1, [r3, #32]
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	430b      	orrs	r3, r1
 800229a:	4925      	ldr	r1, [pc, #148]	; (8002330 <HAL_RCC_OscConfig+0xc44>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
 80022a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022b8:	601a      	str	r2, [r3, #0]
  return result;
 80022ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022be:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	461a      	mov	r2, r3
 80022d2:	2301      	movs	r3, #1
 80022d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7fe fd27 	bl	8000d28 <HAL_GetTick>
 80022da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022de:	e009      	b.n	80022f4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e0:	f7fe fd22 	bl	8000d28 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e109      	b.n	8002508 <HAL_RCC_OscConfig+0xe1c>
 80022f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	fa93 f2a3 	rbit	r2, r3
 8002308:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800230c:	601a      	str	r2, [r3, #0]
  return result;
 800230e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002312:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	b2db      	uxtb	r3, r3
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b01      	cmp	r3, #1
 8002326:	d105      	bne.n	8002334 <HAL_RCC_OscConfig+0xc48>
 8002328:	4b01      	ldr	r3, [pc, #4]	; (8002330 <HAL_RCC_OscConfig+0xc44>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	e01e      	b.n	800236c <HAL_RCC_OscConfig+0xc80>
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
 8002334:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002338:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800233c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	fa93 f2a3 	rbit	r2, r3
 8002348:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002352:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	fa93 f2a3 	rbit	r2, r3
 8002362:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	4b6a      	ldr	r3, [pc, #424]	; (8002514 <HAL_RCC_OscConfig+0xe28>)
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002370:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002374:	6011      	str	r1, [r2, #0]
 8002376:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	fa92 f1a2 	rbit	r1, r2
 8002380:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002384:	6011      	str	r1, [r2, #0]
  return result;
 8002386:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	fab2 f282 	clz	r2, r2
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	f042 0220 	orr.w	r2, r2, #32
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	f002 021f 	and.w	r2, r2, #31
 800239c:	2101      	movs	r1, #1
 800239e:	fa01 f202 	lsl.w	r2, r1, r2
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d09b      	beq.n	80022e0 <HAL_RCC_OscConfig+0xbf4>
 80023a8:	e0ad      	b.n	8002506 <HAL_RCC_OscConfig+0xe1a>
 80023aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	fa93 f2a3 	rbit	r2, r3
 80023be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023c2:	601a      	str	r2, [r3, #0]
  return result;
 80023c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	461a      	mov	r2, r3
 80023dc:	2300      	movs	r3, #0
 80023de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fe fca2 	bl	8000d28 <HAL_GetTick>
 80023e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e8:	e009      	b.n	80023fe <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ea:	f7fe fc9d 	bl	8000d28 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e084      	b.n	8002508 <HAL_RCC_OscConfig+0xe1c>
 80023fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002402:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	fa93 f2a3 	rbit	r2, r3
 8002412:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002416:	601a      	str	r2, [r3, #0]
  return result;
 8002418:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800241c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d102      	bne.n	8002438 <HAL_RCC_OscConfig+0xd4c>
 8002432:	4b38      	ldr	r3, [pc, #224]	; (8002514 <HAL_RCC_OscConfig+0xe28>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	e01b      	b.n	8002470 <HAL_RCC_OscConfig+0xd84>
 8002438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800243c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	fa93 f2a3 	rbit	r2, r3
 800244c:	f107 0320 	add.w	r3, r7, #32
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	f107 031c 	add.w	r3, r7, #28
 8002456:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	f107 031c 	add.w	r3, r7, #28
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	fa93 f2a3 	rbit	r2, r3
 8002466:	f107 0318 	add.w	r3, r7, #24
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	4b29      	ldr	r3, [pc, #164]	; (8002514 <HAL_RCC_OscConfig+0xe28>)
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	f107 0214 	add.w	r2, r7, #20
 8002474:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002478:	6011      	str	r1, [r2, #0]
 800247a:	f107 0214 	add.w	r2, r7, #20
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	fa92 f1a2 	rbit	r1, r2
 8002484:	f107 0210 	add.w	r2, r7, #16
 8002488:	6011      	str	r1, [r2, #0]
  return result;
 800248a:	f107 0210 	add.w	r2, r7, #16
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	fab2 f282 	clz	r2, r2
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	f042 0220 	orr.w	r2, r2, #32
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	f002 021f 	and.w	r2, r2, #31
 80024a0:	2101      	movs	r1, #1
 80024a2:	fa01 f202 	lsl.w	r2, r1, r2
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d19e      	bne.n	80023ea <HAL_RCC_OscConfig+0xcfe>
 80024ac:	e02b      	b.n	8002506 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e025      	b.n	8002508 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_RCC_OscConfig+0xe28>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_RCC_OscConfig+0xe28>)
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80024d0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d111      	bne.n	8002502 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80024de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80024e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d108      	bne.n	8002502 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80024f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024f4:	f003 020f 	and.w	r2, r3, #15
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80024fe:	429a      	cmp	r2, r3
 8002500:	d001      	beq.n	8002506 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000

08002518 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b09e      	sub	sp, #120	; 0x78
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e162      	b.n	80027f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002530:	4b90      	ldr	r3, [pc, #576]	; (8002774 <HAL_RCC_ClockConfig+0x25c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d910      	bls.n	8002560 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b8d      	ldr	r3, [pc, #564]	; (8002774 <HAL_RCC_ClockConfig+0x25c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 0207 	bic.w	r2, r3, #7
 8002546:	498b      	ldr	r1, [pc, #556]	; (8002774 <HAL_RCC_ClockConfig+0x25c>)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b89      	ldr	r3, [pc, #548]	; (8002774 <HAL_RCC_ClockConfig+0x25c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e14a      	b.n	80027f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800256c:	4b82      	ldr	r3, [pc, #520]	; (8002778 <HAL_RCC_ClockConfig+0x260>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	497f      	ldr	r1, [pc, #508]	; (8002778 <HAL_RCC_ClockConfig+0x260>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 80dc 	beq.w	8002744 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d13c      	bne.n	800260e <HAL_RCC_ClockConfig+0xf6>
 8002594:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002598:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80025a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d102      	bne.n	80025be <HAL_RCC_ClockConfig+0xa6>
 80025b8:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <HAL_RCC_ClockConfig+0x260>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	e00f      	b.n	80025de <HAL_RCC_ClockConfig+0xc6>
 80025be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	667b      	str	r3, [r7, #100]	; 0x64
 80025cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d0:	663b      	str	r3, [r7, #96]	; 0x60
 80025d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025da:	4b67      	ldr	r3, [pc, #412]	; (8002778 <HAL_RCC_ClockConfig+0x260>)
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80025e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025e6:	fa92 f2a2 	rbit	r2, r2
 80025ea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80025ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025ee:	fab2 f282 	clz	r2, r2
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	f042 0220 	orr.w	r2, r2, #32
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	f002 021f 	and.w	r2, r2, #31
 80025fe:	2101      	movs	r1, #1
 8002600:	fa01 f202 	lsl.w	r2, r1, r2
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d17b      	bne.n	8002702 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0f3      	b.n	80027f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d13c      	bne.n	8002690 <HAL_RCC_ClockConfig+0x178>
 8002616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800261a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	095b      	lsrs	r3, r3, #5
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b01      	cmp	r3, #1
 8002638:	d102      	bne.n	8002640 <HAL_RCC_ClockConfig+0x128>
 800263a:	4b4f      	ldr	r3, [pc, #316]	; (8002778 <HAL_RCC_ClockConfig+0x260>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	e00f      	b.n	8002660 <HAL_RCC_ClockConfig+0x148>
 8002640:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002644:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	647b      	str	r3, [r7, #68]	; 0x44
 800264e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002652:	643b      	str	r3, [r7, #64]	; 0x40
 8002654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800265c:	4b46      	ldr	r3, [pc, #280]	; (8002778 <HAL_RCC_ClockConfig+0x260>)
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002664:	63ba      	str	r2, [r7, #56]	; 0x38
 8002666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002668:	fa92 f2a2 	rbit	r2, r2
 800266c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800266e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002670:	fab2 f282 	clz	r2, r2
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	f042 0220 	orr.w	r2, r2, #32
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	f002 021f 	and.w	r2, r2, #31
 8002680:	2101      	movs	r1, #1
 8002682:	fa01 f202 	lsl.w	r2, r1, r2
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d13a      	bne.n	8002702 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0b2      	b.n	80027f6 <HAL_RCC_ClockConfig+0x2de>
 8002690:	2302      	movs	r3, #2
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d102      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x1a0>
 80026b2:	4b31      	ldr	r3, [pc, #196]	; (8002778 <HAL_RCC_ClockConfig+0x260>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	e00d      	b.n	80026d4 <HAL_RCC_ClockConfig+0x1bc>
 80026b8:	2302      	movs	r3, #2
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
 80026c4:	2302      	movs	r3, #2
 80026c6:	623b      	str	r3, [r7, #32]
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	4b29      	ldr	r3, [pc, #164]	; (8002778 <HAL_RCC_ClockConfig+0x260>)
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	2202      	movs	r2, #2
 80026d6:	61ba      	str	r2, [r7, #24]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	fa92 f2a2 	rbit	r2, r2
 80026de:	617a      	str	r2, [r7, #20]
  return result;
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	fab2 f282 	clz	r2, r2
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	f042 0220 	orr.w	r2, r2, #32
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	f002 021f 	and.w	r2, r2, #31
 80026f2:	2101      	movs	r1, #1
 80026f4:	fa01 f202 	lsl.w	r2, r1, r2
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e079      	b.n	80027f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <HAL_RCC_ClockConfig+0x260>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f023 0203 	bic.w	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	491a      	ldr	r1, [pc, #104]	; (8002778 <HAL_RCC_ClockConfig+0x260>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002714:	f7fe fb08 	bl	8000d28 <HAL_GetTick>
 8002718:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	e00a      	b.n	8002732 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271c:	f7fe fb04 	bl	8000d28 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	; 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e061      	b.n	80027f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_RCC_ClockConfig+0x260>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 020c 	and.w	r2, r3, #12
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	429a      	cmp	r2, r3
 8002742:	d1eb      	bne.n	800271c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCC_ClockConfig+0x25c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d214      	bcs.n	800277c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b08      	ldr	r3, [pc, #32]	; (8002774 <HAL_RCC_ClockConfig+0x25c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 0207 	bic.w	r2, r3, #7
 800275a:	4906      	ldr	r1, [pc, #24]	; (8002774 <HAL_RCC_ClockConfig+0x25c>)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <HAL_RCC_ClockConfig+0x25c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e040      	b.n	80027f6 <HAL_RCC_ClockConfig+0x2de>
 8002774:	40022000 	.word	0x40022000
 8002778:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002788:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <HAL_RCC_ClockConfig+0x2e8>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	491a      	ldr	r1, [pc, #104]	; (8002800 <HAL_RCC_ClockConfig+0x2e8>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <HAL_RCC_ClockConfig+0x2e8>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	4912      	ldr	r1, [pc, #72]	; (8002800 <HAL_RCC_ClockConfig+0x2e8>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027ba:	f000 f829 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 80027be:	4601      	mov	r1, r0
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <HAL_RCC_ClockConfig+0x2e8>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c8:	22f0      	movs	r2, #240	; 0xf0
 80027ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	fa92 f2a2 	rbit	r2, r2
 80027d2:	60fa      	str	r2, [r7, #12]
  return result;
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	fab2 f282 	clz	r2, r2
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	40d3      	lsrs	r3, r2
 80027de:	4a09      	ldr	r2, [pc, #36]	; (8002804 <HAL_RCC_ClockConfig+0x2ec>)
 80027e0:	5cd3      	ldrb	r3, [r2, r3]
 80027e2:	fa21 f303 	lsr.w	r3, r1, r3
 80027e6:	4a08      	ldr	r2, [pc, #32]	; (8002808 <HAL_RCC_ClockConfig+0x2f0>)
 80027e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <HAL_RCC_ClockConfig+0x2f4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe fa56 	bl	8000ca0 <HAL_InitTick>
  
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3778      	adds	r7, #120	; 0x78
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000
 8002804:	080048cc 	.word	0x080048cc
 8002808:	2000003c 	.word	0x2000003c
 800280c:	20000040 	.word	0x20000040

08002810 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002810:	b480      	push	{r7}
 8002812:	b08b      	sub	sp, #44	; 0x2c
 8002814:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800282a:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b04      	cmp	r3, #4
 8002838:	d002      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x30>
 800283a:	2b08      	cmp	r3, #8
 800283c:	d003      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x36>
 800283e:	e03f      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002840:	4b25      	ldr	r3, [pc, #148]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002842:	623b      	str	r3, [r7, #32]
      break;
 8002844:	e03f      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800284c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002850:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	fa92 f2a2 	rbit	r2, r2
 8002858:	607a      	str	r2, [r7, #4]
  return result;
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	fab2 f282 	clz	r2, r2
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	40d3      	lsrs	r3, r2
 8002864:	4a1d      	ldr	r2, [pc, #116]	; (80028dc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002866:	5cd3      	ldrb	r3, [r2, r3]
 8002868:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800286a:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	220f      	movs	r2, #15
 8002874:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	fa92 f2a2 	rbit	r2, r2
 800287c:	60fa      	str	r2, [r7, #12]
  return result;
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	fab2 f282 	clz	r2, r2
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	40d3      	lsrs	r3, r2
 8002888:	4a15      	ldr	r2, [pc, #84]	; (80028e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800288a:	5cd3      	ldrb	r3, [r2, r3]
 800288c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002898:	4a0f      	ldr	r2, [pc, #60]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	fbb2 f2f3 	udiv	r2, r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fb02 f303 	mul.w	r3, r2, r3
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
 80028a8:	e007      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028aa:	4a0b      	ldr	r2, [pc, #44]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	fb02 f303 	mul.w	r3, r2, r3
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	623b      	str	r3, [r7, #32]
      break;
 80028be:	e002      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028c2:	623b      	str	r3, [r7, #32]
      break;
 80028c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c6:	6a3b      	ldr	r3, [r7, #32]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	372c      	adds	r7, #44	; 0x2c
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	40021000 	.word	0x40021000
 80028d8:	007a1200 	.word	0x007a1200
 80028dc:	080048e4 	.word	0x080048e4
 80028e0:	080048f4 	.word	0x080048f4

080028e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	2000003c 	.word	0x2000003c

080028fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002902:	f7ff ffef 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 8002906:	4601      	mov	r1, r0
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002910:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002914:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	fa92 f2a2 	rbit	r2, r2
 800291c:	603a      	str	r2, [r7, #0]
  return result;
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	fab2 f282 	clz	r2, r2
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	40d3      	lsrs	r3, r2
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <HAL_RCC_GetPCLK1Freq+0x40>)
 800292a:	5cd3      	ldrb	r3, [r2, r3]
 800292c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	080048dc 	.word	0x080048dc

08002940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002946:	f7ff ffcd 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 800294a:	4601      	mov	r1, r0
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002954:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002958:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	fa92 f2a2 	rbit	r2, r2
 8002960:	603a      	str	r2, [r7, #0]
  return result;
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	fab2 f282 	clz	r2, r2
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	40d3      	lsrs	r3, r2
 800296c:	4a04      	ldr	r2, [pc, #16]	; (8002980 <HAL_RCC_GetPCLK2Freq+0x40>)
 800296e:	5cd3      	ldrb	r3, [r2, r3]
 8002970:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000
 8002980:	080048dc 	.word	0x080048dc

08002984 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b092      	sub	sp, #72	; 0x48
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80d7 	beq.w	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a8:	4b4e      	ldr	r3, [pc, #312]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10e      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b4:	4b4b      	ldr	r3, [pc, #300]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	4a4a      	ldr	r2, [pc, #296]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029be:	61d3      	str	r3, [r2, #28]
 80029c0:	4b48      	ldr	r3, [pc, #288]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d2:	4b45      	ldr	r3, [pc, #276]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d118      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029de:	4b42      	ldr	r3, [pc, #264]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a41      	ldr	r2, [pc, #260]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ea:	f7fe f99d 	bl	8000d28 <HAL_GetTick>
 80029ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f0:	e008      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f2:	f7fe f999 	bl	8000d28 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b64      	cmp	r3, #100	; 0x64
 80029fe:	d901      	bls.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1d6      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a04:	4b38      	ldr	r3, [pc, #224]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a10:	4b34      	ldr	r3, [pc, #208]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8084 	beq.w	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d07c      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a30:	4b2c      	ldr	r3, [pc, #176]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	4b26      	ldr	r3, [pc, #152]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2300      	movs	r3, #0
 8002a80:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a82:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a86:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d04b      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a92:	f7fe f949 	bl	8000d28 <HAL_GetTick>
 8002a96:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a98:	e00a      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9a:	f7fe f945 	bl	8000d28 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e180      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
 8002abc:	2302      	movs	r3, #2
 8002abe:	623b      	str	r3, [r7, #32]
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	61fb      	str	r3, [r7, #28]
  return result;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f043 0302 	orr.w	r3, r3, #2
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d108      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ade:	4b01      	ldr	r3, [pc, #4]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	e00d      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40007000 	.word	0x40007000
 8002aec:	10908100 	.word	0x10908100
 8002af0:	2302      	movs	r3, #2
 8002af2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	4ba0      	ldr	r3, [pc, #640]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	2202      	movs	r2, #2
 8002b02:	613a      	str	r2, [r7, #16]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	fa92 f2a2 	rbit	r2, r2
 8002b0a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	fab2 f282 	clz	r2, r2
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	f002 021f 	and.w	r2, r2, #31
 8002b1e:	2101      	movs	r1, #1
 8002b20:	fa01 f202 	lsl.w	r2, r1, r2
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0b7      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b2a:	4b95      	ldr	r3, [pc, #596]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4992      	ldr	r1, [pc, #584]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d105      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b44:	4b8e      	ldr	r3, [pc, #568]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	4a8d      	ldr	r2, [pc, #564]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b5c:	4b88      	ldr	r3, [pc, #544]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	f023 0203 	bic.w	r2, r3, #3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4985      	ldr	r1, [pc, #532]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d008      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b7a:	4b81      	ldr	r3, [pc, #516]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	497e      	ldr	r1, [pc, #504]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b98:	4b79      	ldr	r3, [pc, #484]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	4976      	ldr	r1, [pc, #472]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bb6:	4b72      	ldr	r3, [pc, #456]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	f023 0210 	bic.w	r2, r3, #16
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	496f      	ldr	r1, [pc, #444]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002bd4:	4b6a      	ldr	r3, [pc, #424]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	4967      	ldr	r1, [pc, #412]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bf2:	4b63      	ldr	r3, [pc, #396]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f023 0220 	bic.w	r2, r3, #32
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	4960      	ldr	r1, [pc, #384]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c10:	4b5b      	ldr	r3, [pc, #364]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	4958      	ldr	r1, [pc, #352]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c2e:	4b54      	ldr	r3, [pc, #336]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	4951      	ldr	r1, [pc, #324]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c4c:	4b4c      	ldr	r3, [pc, #304]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	4949      	ldr	r1, [pc, #292]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c6a:	4b45      	ldr	r3, [pc, #276]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	4942      	ldr	r1, [pc, #264]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c88:	4b3d      	ldr	r3, [pc, #244]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	493a      	ldr	r1, [pc, #232]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ca6:	4b36      	ldr	r3, [pc, #216]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	4933      	ldr	r1, [pc, #204]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cc4:	4b2e      	ldr	r3, [pc, #184]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd0:	492b      	ldr	r1, [pc, #172]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d008      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002ce2:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	4924      	ldr	r1, [pc, #144]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002d00:	4b1f      	ldr	r3, [pc, #124]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	491c      	ldr	r1, [pc, #112]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d008      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002d1e:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2a:	4915      	ldr	r1, [pc, #84]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002d3c:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d48:	490d      	ldr	r1, [pc, #52]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d66:	4906      	ldr	r1, [pc, #24]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00c      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002d78:	4b01      	ldr	r3, [pc, #4]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	e002      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
 8002d84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8c:	490b      	ldr	r1, [pc, #44]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d008      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002d9e:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002daa:	4904      	ldr	r1, [pc, #16]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3748      	adds	r7, #72	; 0x48
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e040      	b.n	8002e54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fd fdde 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2224      	movs	r2, #36	; 0x24
 8002dec:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0201 	bic.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 faa8 	bl	8003354 <UART_SetConfig>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e022      	b.n	8002e54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fcb6 	bl	8003788 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fd3d 	bl	80038cc <UART_CheckIdleState>
 8002e52:	4603      	mov	r3, r0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	; 0x28
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	f040 8081 	bne.w	8002f78 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <HAL_UART_Transmit+0x26>
 8002e7c:	88fb      	ldrh	r3, [r7, #6]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e079      	b.n	8002f7a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_UART_Transmit+0x38>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e072      	b.n	8002f7a <HAL_UART_Transmit+0x11e>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2221      	movs	r2, #33	; 0x21
 8002ea6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002ea8:	f7fd ff3e 	bl	8000d28 <HAL_GetTick>
 8002eac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	88fa      	ldrh	r2, [r7, #6]
 8002eb2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	88fa      	ldrh	r2, [r7, #6]
 8002eba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec6:	d108      	bne.n	8002eda <HAL_UART_Transmit+0x7e>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d104      	bne.n	8002eda <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	61bb      	str	r3, [r7, #24]
 8002ed8:	e003      	b.n	8002ee2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ee2:	e02d      	b.n	8002f40 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2200      	movs	r2, #0
 8002eec:	2180      	movs	r1, #128	; 0x80
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 fd31 	bl	8003956 <UART_WaitOnFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e03d      	b.n	8002f7a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10b      	bne.n	8002f1c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	881a      	ldrh	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f10:	b292      	uxth	r2, r2
 8002f12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	3302      	adds	r3, #2
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	e008      	b.n	8002f2e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	b292      	uxth	r2, r2
 8002f26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1cb      	bne.n	8002ee4 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2200      	movs	r2, #0
 8002f54:	2140      	movs	r1, #64	; 0x40
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fcfd 	bl	8003956 <UART_WaitOnFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e009      	b.n	8002f7a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e000      	b.n	8002f7a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002f78:	2302      	movs	r3, #2
  }
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3720      	adds	r7, #32
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	d16c      	bne.n	8003074 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HAL_UART_Receive_DMA+0x22>
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e065      	b.n	8003076 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_UART_Receive_DMA+0x34>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e05e      	b.n	8003076 <HAL_UART_Receive_DMA+0xf2>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	88fa      	ldrh	r2, [r7, #6]
 8002fca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2222      	movs	r2, #34	; 0x22
 8002fd8:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d02a      	beq.n	8003038 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fe6:	4a26      	ldr	r2, [pc, #152]	; (8003080 <HAL_UART_Receive_DMA+0xfc>)
 8002fe8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fee:	4a25      	ldr	r2, [pc, #148]	; (8003084 <HAL_UART_Receive_DMA+0x100>)
 8002ff0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ff6:	4a24      	ldr	r2, [pc, #144]	; (8003088 <HAL_UART_Receive_DMA+0x104>)
 8002ff8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ffe:	2200      	movs	r2, #0
 8003000:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3324      	adds	r3, #36	; 0x24
 800300c:	4619      	mov	r1, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003012:	461a      	mov	r2, r3
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	f7fd ffeb 	bl	8000ff0 <HAL_DMA_Start_IT>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00b      	beq.n	8003038 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2210      	movs	r2, #16
 8003024:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2220      	movs	r2, #32
 8003032:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e01e      	b.n	8003076 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800304e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800306e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	e000      	b.n	8003076 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8003074:	2302      	movs	r3, #2
  }
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	08003ab7 	.word	0x08003ab7
 8003084:	08003b19 	.word	0x08003b19
 8003088:	08003b35 	.word	0x08003b35

0800308c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030ac:	69fa      	ldr	r2, [r7, #28]
 80030ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d113      	bne.n	80030e4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00e      	beq.n	80030e4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d009      	beq.n	80030e4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 8114 	beq.w	8003302 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	4798      	blx	r3
      }
      return;
 80030e2:	e10e      	b.n	8003302 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80d6 	beq.w	8003298 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d105      	bne.n	8003102 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80cb 	beq.w	8003298 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00e      	beq.n	800312a <HAL_UART_IRQHandler+0x9e>
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d009      	beq.n	800312a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2201      	movs	r2, #1
 800311c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00e      	beq.n	8003152 <HAL_UART_IRQHandler+0xc6>
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d009      	beq.n	8003152 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2202      	movs	r2, #2
 8003144:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800314a:	f043 0204 	orr.w	r2, r3, #4
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00e      	beq.n	800317a <HAL_UART_IRQHandler+0xee>
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2204      	movs	r2, #4
 800316c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003172:	f043 0202 	orr.w	r2, r3, #2
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d013      	beq.n	80031ac <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b00      	cmp	r3, #0
 800318c:	d104      	bne.n	8003198 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003194:	2b00      	cmp	r3, #0
 8003196:	d009      	beq.n	80031ac <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2208      	movs	r2, #8
 800319e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031a4:	f043 0208 	orr.w	r2, r3, #8
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00f      	beq.n	80031d6 <HAL_UART_IRQHandler+0x14a>
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ce:	f043 0220 	orr.w	r2, r3, #32
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8093 	beq.w	8003306 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003208:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003214:	2b40      	cmp	r3, #64	; 0x40
 8003216:	d004      	beq.n	8003222 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800321e:	2b00      	cmp	r3, #0
 8003220:	d031      	beq.n	8003286 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fc27 	bl	8003a76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d123      	bne.n	800327e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003244:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d013      	beq.n	8003276 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003252:	4a30      	ldr	r2, [pc, #192]	; (8003314 <HAL_UART_IRQHandler+0x288>)
 8003254:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd ff27 	bl	80010ae <HAL_DMA_Abort_IT>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d016      	beq.n	8003294 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800326a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003270:	4610      	mov	r0, r2
 8003272:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003274:	e00e      	b.n	8003294 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f862 	bl	8003340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327c:	e00a      	b.n	8003294 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f85e 	bl	8003340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003284:	e006      	b.n	8003294 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f85a 	bl	8003340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003292:	e038      	b.n	8003306 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003294:	bf00      	nop
    return;
 8003296:	e036      	b.n	8003306 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00d      	beq.n	80032be <HAL_UART_IRQHandler+0x232>
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fca7 	bl	8003c0a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032bc:	e026      	b.n	800330c <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00d      	beq.n	80032e4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d017      	beq.n	800330a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	4798      	blx	r3
    }
    return;
 80032e2:	e012      	b.n	800330a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00e      	beq.n	800330c <HAL_UART_IRQHandler+0x280>
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d009      	beq.n	800330c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fc6d 	bl	8003bd8 <UART_EndTransmit_IT>
    return;
 80032fe:	bf00      	nop
 8003300:	e004      	b.n	800330c <HAL_UART_IRQHandler+0x280>
      return;
 8003302:	bf00      	nop
 8003304:	e002      	b.n	800330c <HAL_UART_IRQHandler+0x280>
    return;
 8003306:	bf00      	nop
 8003308:	e000      	b.n	800330c <HAL_UART_IRQHandler+0x280>
    return;
 800330a:	bf00      	nop
  }

}
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	08003bad 	.word	0x08003bad

08003318 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800335c:	2300      	movs	r3, #0
 800335e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4bac      	ldr	r3, [pc, #688]	; (8003634 <UART_SetConfig+0x2e0>)
 8003384:	4013      	ands	r3, r2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	6939      	ldr	r1, [r7, #16]
 800338c:	430b      	orrs	r3, r1
 800338e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a9a      	ldr	r2, [pc, #616]	; (8003638 <UART_SetConfig+0x2e4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d121      	bne.n	8003418 <UART_SetConfig+0xc4>
 80033d4:	4b99      	ldr	r3, [pc, #612]	; (800363c <UART_SetConfig+0x2e8>)
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d817      	bhi.n	8003410 <UART_SetConfig+0xbc>
 80033e0:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <UART_SetConfig+0x94>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	080033f9 	.word	0x080033f9
 80033ec:	08003405 	.word	0x08003405
 80033f0:	0800340b 	.word	0x0800340b
 80033f4:	080033ff 	.word	0x080033ff
 80033f8:	2301      	movs	r3, #1
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e0b2      	b.n	8003564 <UART_SetConfig+0x210>
 80033fe:	2302      	movs	r3, #2
 8003400:	77fb      	strb	r3, [r7, #31]
 8003402:	e0af      	b.n	8003564 <UART_SetConfig+0x210>
 8003404:	2304      	movs	r3, #4
 8003406:	77fb      	strb	r3, [r7, #31]
 8003408:	e0ac      	b.n	8003564 <UART_SetConfig+0x210>
 800340a:	2308      	movs	r3, #8
 800340c:	77fb      	strb	r3, [r7, #31]
 800340e:	e0a9      	b.n	8003564 <UART_SetConfig+0x210>
 8003410:	2310      	movs	r3, #16
 8003412:	77fb      	strb	r3, [r7, #31]
 8003414:	bf00      	nop
 8003416:	e0a5      	b.n	8003564 <UART_SetConfig+0x210>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a88      	ldr	r2, [pc, #544]	; (8003640 <UART_SetConfig+0x2ec>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d123      	bne.n	800346a <UART_SetConfig+0x116>
 8003422:	4b86      	ldr	r3, [pc, #536]	; (800363c <UART_SetConfig+0x2e8>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800342a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342e:	d012      	beq.n	8003456 <UART_SetConfig+0x102>
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003434:	d802      	bhi.n	800343c <UART_SetConfig+0xe8>
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <UART_SetConfig+0xf6>
 800343a:	e012      	b.n	8003462 <UART_SetConfig+0x10e>
 800343c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003440:	d00c      	beq.n	800345c <UART_SetConfig+0x108>
 8003442:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003446:	d003      	beq.n	8003450 <UART_SetConfig+0xfc>
 8003448:	e00b      	b.n	8003462 <UART_SetConfig+0x10e>
 800344a:	2300      	movs	r3, #0
 800344c:	77fb      	strb	r3, [r7, #31]
 800344e:	e089      	b.n	8003564 <UART_SetConfig+0x210>
 8003450:	2302      	movs	r3, #2
 8003452:	77fb      	strb	r3, [r7, #31]
 8003454:	e086      	b.n	8003564 <UART_SetConfig+0x210>
 8003456:	2304      	movs	r3, #4
 8003458:	77fb      	strb	r3, [r7, #31]
 800345a:	e083      	b.n	8003564 <UART_SetConfig+0x210>
 800345c:	2308      	movs	r3, #8
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e080      	b.n	8003564 <UART_SetConfig+0x210>
 8003462:	2310      	movs	r3, #16
 8003464:	77fb      	strb	r3, [r7, #31]
 8003466:	bf00      	nop
 8003468:	e07c      	b.n	8003564 <UART_SetConfig+0x210>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a75      	ldr	r2, [pc, #468]	; (8003644 <UART_SetConfig+0x2f0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d123      	bne.n	80034bc <UART_SetConfig+0x168>
 8003474:	4b71      	ldr	r3, [pc, #452]	; (800363c <UART_SetConfig+0x2e8>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800347c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003480:	d012      	beq.n	80034a8 <UART_SetConfig+0x154>
 8003482:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003486:	d802      	bhi.n	800348e <UART_SetConfig+0x13a>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <UART_SetConfig+0x148>
 800348c:	e012      	b.n	80034b4 <UART_SetConfig+0x160>
 800348e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003492:	d00c      	beq.n	80034ae <UART_SetConfig+0x15a>
 8003494:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003498:	d003      	beq.n	80034a2 <UART_SetConfig+0x14e>
 800349a:	e00b      	b.n	80034b4 <UART_SetConfig+0x160>
 800349c:	2300      	movs	r3, #0
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e060      	b.n	8003564 <UART_SetConfig+0x210>
 80034a2:	2302      	movs	r3, #2
 80034a4:	77fb      	strb	r3, [r7, #31]
 80034a6:	e05d      	b.n	8003564 <UART_SetConfig+0x210>
 80034a8:	2304      	movs	r3, #4
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e05a      	b.n	8003564 <UART_SetConfig+0x210>
 80034ae:	2308      	movs	r3, #8
 80034b0:	77fb      	strb	r3, [r7, #31]
 80034b2:	e057      	b.n	8003564 <UART_SetConfig+0x210>
 80034b4:	2310      	movs	r3, #16
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	bf00      	nop
 80034ba:	e053      	b.n	8003564 <UART_SetConfig+0x210>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a61      	ldr	r2, [pc, #388]	; (8003648 <UART_SetConfig+0x2f4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d123      	bne.n	800350e <UART_SetConfig+0x1ba>
 80034c6:	4b5d      	ldr	r3, [pc, #372]	; (800363c <UART_SetConfig+0x2e8>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d2:	d012      	beq.n	80034fa <UART_SetConfig+0x1a6>
 80034d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d8:	d802      	bhi.n	80034e0 <UART_SetConfig+0x18c>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <UART_SetConfig+0x19a>
 80034de:	e012      	b.n	8003506 <UART_SetConfig+0x1b2>
 80034e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034e4:	d00c      	beq.n	8003500 <UART_SetConfig+0x1ac>
 80034e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034ea:	d003      	beq.n	80034f4 <UART_SetConfig+0x1a0>
 80034ec:	e00b      	b.n	8003506 <UART_SetConfig+0x1b2>
 80034ee:	2300      	movs	r3, #0
 80034f0:	77fb      	strb	r3, [r7, #31]
 80034f2:	e037      	b.n	8003564 <UART_SetConfig+0x210>
 80034f4:	2302      	movs	r3, #2
 80034f6:	77fb      	strb	r3, [r7, #31]
 80034f8:	e034      	b.n	8003564 <UART_SetConfig+0x210>
 80034fa:	2304      	movs	r3, #4
 80034fc:	77fb      	strb	r3, [r7, #31]
 80034fe:	e031      	b.n	8003564 <UART_SetConfig+0x210>
 8003500:	2308      	movs	r3, #8
 8003502:	77fb      	strb	r3, [r7, #31]
 8003504:	e02e      	b.n	8003564 <UART_SetConfig+0x210>
 8003506:	2310      	movs	r3, #16
 8003508:	77fb      	strb	r3, [r7, #31]
 800350a:	bf00      	nop
 800350c:	e02a      	b.n	8003564 <UART_SetConfig+0x210>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a4e      	ldr	r2, [pc, #312]	; (800364c <UART_SetConfig+0x2f8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d123      	bne.n	8003560 <UART_SetConfig+0x20c>
 8003518:	4b48      	ldr	r3, [pc, #288]	; (800363c <UART_SetConfig+0x2e8>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003520:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003524:	d012      	beq.n	800354c <UART_SetConfig+0x1f8>
 8003526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800352a:	d802      	bhi.n	8003532 <UART_SetConfig+0x1de>
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <UART_SetConfig+0x1ec>
 8003530:	e012      	b.n	8003558 <UART_SetConfig+0x204>
 8003532:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003536:	d00c      	beq.n	8003552 <UART_SetConfig+0x1fe>
 8003538:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800353c:	d003      	beq.n	8003546 <UART_SetConfig+0x1f2>
 800353e:	e00b      	b.n	8003558 <UART_SetConfig+0x204>
 8003540:	2300      	movs	r3, #0
 8003542:	77fb      	strb	r3, [r7, #31]
 8003544:	e00e      	b.n	8003564 <UART_SetConfig+0x210>
 8003546:	2302      	movs	r3, #2
 8003548:	77fb      	strb	r3, [r7, #31]
 800354a:	e00b      	b.n	8003564 <UART_SetConfig+0x210>
 800354c:	2304      	movs	r3, #4
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e008      	b.n	8003564 <UART_SetConfig+0x210>
 8003552:	2308      	movs	r3, #8
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e005      	b.n	8003564 <UART_SetConfig+0x210>
 8003558:	2310      	movs	r3, #16
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	bf00      	nop
 800355e:	e001      	b.n	8003564 <UART_SetConfig+0x210>
 8003560:	2310      	movs	r3, #16
 8003562:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356c:	f040 8090 	bne.w	8003690 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003570:	7ffb      	ldrb	r3, [r7, #31]
 8003572:	2b08      	cmp	r3, #8
 8003574:	d86c      	bhi.n	8003650 <UART_SetConfig+0x2fc>
 8003576:	a201      	add	r2, pc, #4	; (adr r2, 800357c <UART_SetConfig+0x228>)
 8003578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357c:	080035a1 	.word	0x080035a1
 8003580:	080035c1 	.word	0x080035c1
 8003584:	080035e1 	.word	0x080035e1
 8003588:	08003651 	.word	0x08003651
 800358c:	080035fd 	.word	0x080035fd
 8003590:	08003651 	.word	0x08003651
 8003594:	08003651 	.word	0x08003651
 8003598:	08003651 	.word	0x08003651
 800359c:	0800361d 	.word	0x0800361d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a0:	f7ff f9ac 	bl	80028fc <HAL_RCC_GetPCLK1Freq>
 80035a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	005a      	lsls	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	441a      	add	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	61bb      	str	r3, [r7, #24]
        break;
 80035be:	e04a      	b.n	8003656 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035c0:	f7ff f9be 	bl	8002940 <HAL_RCC_GetPCLK2Freq>
 80035c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	005a      	lsls	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	085b      	lsrs	r3, r3, #1
 80035d0:	441a      	add	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035da:	b29b      	uxth	r3, r3
 80035dc:	61bb      	str	r3, [r7, #24]
        break;
 80035de:	e03a      	b.n	8003656 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	085b      	lsrs	r3, r3, #1
 80035e6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80035ea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6852      	ldr	r2, [r2, #4]
 80035f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	61bb      	str	r3, [r7, #24]
        break;
 80035fa:	e02c      	b.n	8003656 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035fc:	f7ff f908 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 8003600:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	005a      	lsls	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	085b      	lsrs	r3, r3, #1
 800360c:	441a      	add	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	fbb2 f3f3 	udiv	r3, r2, r3
 8003616:	b29b      	uxth	r3, r3
 8003618:	61bb      	str	r3, [r7, #24]
        break;
 800361a:	e01c      	b.n	8003656 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	085b      	lsrs	r3, r3, #1
 8003622:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	fbb2 f3f3 	udiv	r3, r2, r3
 800362e:	b29b      	uxth	r3, r3
 8003630:	61bb      	str	r3, [r7, #24]
        break;
 8003632:	e010      	b.n	8003656 <UART_SetConfig+0x302>
 8003634:	efff69f3 	.word	0xefff69f3
 8003638:	40013800 	.word	0x40013800
 800363c:	40021000 	.word	0x40021000
 8003640:	40004400 	.word	0x40004400
 8003644:	40004800 	.word	0x40004800
 8003648:	40004c00 	.word	0x40004c00
 800364c:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	75fb      	strb	r3, [r7, #23]
        break;
 8003654:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b0f      	cmp	r3, #15
 800365a:	d916      	bls.n	800368a <UART_SetConfig+0x336>
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003662:	d212      	bcs.n	800368a <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	b29b      	uxth	r3, r3
 8003668:	f023 030f 	bic.w	r3, r3, #15
 800366c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	085b      	lsrs	r3, r3, #1
 8003672:	b29b      	uxth	r3, r3
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	b29a      	uxth	r2, r3
 800367a:	897b      	ldrh	r3, [r7, #10]
 800367c:	4313      	orrs	r3, r2
 800367e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	897a      	ldrh	r2, [r7, #10]
 8003686:	60da      	str	r2, [r3, #12]
 8003688:	e072      	b.n	8003770 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	75fb      	strb	r3, [r7, #23]
 800368e:	e06f      	b.n	8003770 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8003690:	7ffb      	ldrb	r3, [r7, #31]
 8003692:	2b08      	cmp	r3, #8
 8003694:	d85b      	bhi.n	800374e <UART_SetConfig+0x3fa>
 8003696:	a201      	add	r2, pc, #4	; (adr r2, 800369c <UART_SetConfig+0x348>)
 8003698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369c:	080036c1 	.word	0x080036c1
 80036a0:	080036df 	.word	0x080036df
 80036a4:	080036fd 	.word	0x080036fd
 80036a8:	0800374f 	.word	0x0800374f
 80036ac:	08003719 	.word	0x08003719
 80036b0:	0800374f 	.word	0x0800374f
 80036b4:	0800374f 	.word	0x0800374f
 80036b8:	0800374f 	.word	0x0800374f
 80036bc:	08003737 	.word	0x08003737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c0:	f7ff f91c 	bl	80028fc <HAL_RCC_GetPCLK1Freq>
 80036c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	085a      	lsrs	r2, r3, #1
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	441a      	add	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	b29b      	uxth	r3, r3
 80036da:	61bb      	str	r3, [r7, #24]
        break;
 80036dc:	e03a      	b.n	8003754 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036de:	f7ff f92f 	bl	8002940 <HAL_RCC_GetPCLK2Freq>
 80036e2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	085a      	lsrs	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	441a      	add	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	61bb      	str	r3, [r7, #24]
        break;
 80036fa:	e02b      	b.n	8003754 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003706:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6852      	ldr	r2, [r2, #4]
 800370e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003712:	b29b      	uxth	r3, r3
 8003714:	61bb      	str	r3, [r7, #24]
        break;
 8003716:	e01d      	b.n	8003754 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003718:	f7ff f87a 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 800371c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	085a      	lsrs	r2, r3, #1
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	441a      	add	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003730:	b29b      	uxth	r3, r3
 8003732:	61bb      	str	r3, [r7, #24]
        break;
 8003734:	e00e      	b.n	8003754 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	085b      	lsrs	r3, r3, #1
 800373c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	b29b      	uxth	r3, r3
 800374a:	61bb      	str	r3, [r7, #24]
        break;
 800374c:	e002      	b.n	8003754 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	75fb      	strb	r3, [r7, #23]
        break;
 8003752:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b0f      	cmp	r3, #15
 8003758:	d908      	bls.n	800376c <UART_SetConfig+0x418>
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003760:	d204      	bcs.n	800376c <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	e001      	b.n	8003770 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800377c:	7dfb      	ldrb	r3, [r7, #23]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop

08003788 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01a      	beq.n	800389e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003886:	d10a      	bne.n	800389e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	605a      	str	r2, [r3, #4]
  }
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80038da:	f7fd fa25 	bl	8000d28 <HAL_GetTick>
 80038de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d10e      	bne.n	800390c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f82a 	bl	8003956 <UART_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e020      	b.n	800394e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b04      	cmp	r3, #4
 8003918:	d10e      	bne.n	8003938 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800391a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f814 	bl	8003956 <UART_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e00a      	b.n	800394e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	603b      	str	r3, [r7, #0]
 8003962:	4613      	mov	r3, r2
 8003964:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003966:	e05d      	b.n	8003a24 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396e:	d059      	beq.n	8003a24 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003970:	f7fd f9da 	bl	8000d28 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	429a      	cmp	r2, r3
 800397e:	d302      	bcc.n	8003986 <UART_WaitOnFlagUntilTimeout+0x30>
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d11b      	bne.n	80039be <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003994:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0201 	bic.w	r2, r2, #1
 80039a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2220      	movs	r2, #32
 80039aa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e042      	b.n	8003a44 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d02b      	beq.n	8003a24 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039da:	d123      	bne.n	8003a24 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039e4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e00f      	b.n	8003a44 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	bf0c      	ite	eq
 8003a34:	2301      	moveq	r3, #1
 8003a36:	2300      	movne	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d092      	beq.n	8003968 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003a62:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a8c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0201 	bic.w	r2, r2, #1
 8003a9c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d01e      	beq.n	8003b0a <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ae2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b02:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f7fc feb4 	bl	8000878 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f7ff fc00 	bl	800332c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b46:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b58:	2b80      	cmp	r3, #128	; 0x80
 8003b5a:	d109      	bne.n	8003b70 <UART_DMAError+0x3c>
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	2b21      	cmp	r3, #33	; 0x21
 8003b60:	d106      	bne.n	8003b70 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003b6a:	6978      	ldr	r0, [r7, #20]
 8003b6c:	f7ff ff6e 	bl	8003a4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7a:	2b40      	cmp	r3, #64	; 0x40
 8003b7c:	d109      	bne.n	8003b92 <UART_DMAError+0x5e>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2b22      	cmp	r3, #34	; 0x22
 8003b82:	d106      	bne.n	8003b92 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003b8c:	6978      	ldr	r0, [r7, #20]
 8003b8e:	f7ff ff72 	bl	8003a76 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b96:	f043 0210 	orr.w	r2, r3, #16
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b9e:	6978      	ldr	r0, [r7, #20]
 8003ba0:	f7ff fbce 	bl	8003340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ba4:	bf00      	nop
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f7ff fbb8 	bl	8003340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bee:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff fb8b 	bl	8003318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <__errno>:
 8003c20:	4b01      	ldr	r3, [pc, #4]	; (8003c28 <__errno+0x8>)
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20000048 	.word	0x20000048

08003c2c <__libc_init_array>:
 8003c2c:	b570      	push	{r4, r5, r6, lr}
 8003c2e:	4e0d      	ldr	r6, [pc, #52]	; (8003c64 <__libc_init_array+0x38>)
 8003c30:	4c0d      	ldr	r4, [pc, #52]	; (8003c68 <__libc_init_array+0x3c>)
 8003c32:	1ba4      	subs	r4, r4, r6
 8003c34:	10a4      	asrs	r4, r4, #2
 8003c36:	2500      	movs	r5, #0
 8003c38:	42a5      	cmp	r5, r4
 8003c3a:	d109      	bne.n	8003c50 <__libc_init_array+0x24>
 8003c3c:	4e0b      	ldr	r6, [pc, #44]	; (8003c6c <__libc_init_array+0x40>)
 8003c3e:	4c0c      	ldr	r4, [pc, #48]	; (8003c70 <__libc_init_array+0x44>)
 8003c40:	f000 fe1c 	bl	800487c <_init>
 8003c44:	1ba4      	subs	r4, r4, r6
 8003c46:	10a4      	asrs	r4, r4, #2
 8003c48:	2500      	movs	r5, #0
 8003c4a:	42a5      	cmp	r5, r4
 8003c4c:	d105      	bne.n	8003c5a <__libc_init_array+0x2e>
 8003c4e:	bd70      	pop	{r4, r5, r6, pc}
 8003c50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c54:	4798      	blx	r3
 8003c56:	3501      	adds	r5, #1
 8003c58:	e7ee      	b.n	8003c38 <__libc_init_array+0xc>
 8003c5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c5e:	4798      	blx	r3
 8003c60:	3501      	adds	r5, #1
 8003c62:	e7f2      	b.n	8003c4a <__libc_init_array+0x1e>
 8003c64:	08004a90 	.word	0x08004a90
 8003c68:	08004a90 	.word	0x08004a90
 8003c6c:	08004a90 	.word	0x08004a90
 8003c70:	08004a94 	.word	0x08004a94

08003c74 <memset>:
 8003c74:	4402      	add	r2, r0
 8003c76:	4603      	mov	r3, r0
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d100      	bne.n	8003c7e <memset+0xa>
 8003c7c:	4770      	bx	lr
 8003c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c82:	e7f9      	b.n	8003c78 <memset+0x4>

08003c84 <siscanf>:
 8003c84:	b40e      	push	{r1, r2, r3}
 8003c86:	b530      	push	{r4, r5, lr}
 8003c88:	b09c      	sub	sp, #112	; 0x70
 8003c8a:	ac1f      	add	r4, sp, #124	; 0x7c
 8003c8c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003c90:	f854 5b04 	ldr.w	r5, [r4], #4
 8003c94:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003c98:	9002      	str	r0, [sp, #8]
 8003c9a:	9006      	str	r0, [sp, #24]
 8003c9c:	f7fc faaa 	bl	80001f4 <strlen>
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <siscanf+0x4c>)
 8003ca2:	9003      	str	r0, [sp, #12]
 8003ca4:	9007      	str	r0, [sp, #28]
 8003ca6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ca8:	480a      	ldr	r0, [pc, #40]	; (8003cd4 <siscanf+0x50>)
 8003caa:	9401      	str	r4, [sp, #4]
 8003cac:	2300      	movs	r3, #0
 8003cae:	930f      	str	r3, [sp, #60]	; 0x3c
 8003cb0:	9314      	str	r3, [sp, #80]	; 0x50
 8003cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cb6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003cba:	462a      	mov	r2, r5
 8003cbc:	4623      	mov	r3, r4
 8003cbe:	a902      	add	r1, sp, #8
 8003cc0:	6800      	ldr	r0, [r0, #0]
 8003cc2:	f000 f887 	bl	8003dd4 <__ssvfiscanf_r>
 8003cc6:	b01c      	add	sp, #112	; 0x70
 8003cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ccc:	b003      	add	sp, #12
 8003cce:	4770      	bx	lr
 8003cd0:	08003cd9 	.word	0x08003cd9
 8003cd4:	20000048 	.word	0x20000048

08003cd8 <__seofread>:
 8003cd8:	2000      	movs	r0, #0
 8003cda:	4770      	bx	lr

08003cdc <strchr>:
 8003cdc:	b2c9      	uxtb	r1, r1
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ce4:	b11a      	cbz	r2, 8003cee <strchr+0x12>
 8003ce6:	428a      	cmp	r2, r1
 8003ce8:	d1f9      	bne.n	8003cde <strchr+0x2>
 8003cea:	4618      	mov	r0, r3
 8003cec:	4770      	bx	lr
 8003cee:	2900      	cmp	r1, #0
 8003cf0:	bf18      	it	ne
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	e7f9      	b.n	8003cea <strchr+0xe>

08003cf6 <strncpy>:
 8003cf6:	b570      	push	{r4, r5, r6, lr}
 8003cf8:	3901      	subs	r1, #1
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	b902      	cbnz	r2, 8003d00 <strncpy+0xa>
 8003cfe:	bd70      	pop	{r4, r5, r6, pc}
 8003d00:	4623      	mov	r3, r4
 8003d02:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8003d06:	f803 5b01 	strb.w	r5, [r3], #1
 8003d0a:	1e56      	subs	r6, r2, #1
 8003d0c:	b92d      	cbnz	r5, 8003d1a <strncpy+0x24>
 8003d0e:	4414      	add	r4, r2
 8003d10:	42a3      	cmp	r3, r4
 8003d12:	d0f4      	beq.n	8003cfe <strncpy+0x8>
 8003d14:	f803 5b01 	strb.w	r5, [r3], #1
 8003d18:	e7fa      	b.n	8003d10 <strncpy+0x1a>
 8003d1a:	461c      	mov	r4, r3
 8003d1c:	4632      	mov	r2, r6
 8003d1e:	e7ed      	b.n	8003cfc <strncpy+0x6>

08003d20 <_sungetc_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	1c4b      	adds	r3, r1, #1
 8003d24:	4614      	mov	r4, r2
 8003d26:	d103      	bne.n	8003d30 <_sungetc_r+0x10>
 8003d28:	f04f 35ff 	mov.w	r5, #4294967295
 8003d2c:	4628      	mov	r0, r5
 8003d2e:	bd38      	pop	{r3, r4, r5, pc}
 8003d30:	8993      	ldrh	r3, [r2, #12]
 8003d32:	f023 0320 	bic.w	r3, r3, #32
 8003d36:	8193      	strh	r3, [r2, #12]
 8003d38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d3a:	6852      	ldr	r2, [r2, #4]
 8003d3c:	b2cd      	uxtb	r5, r1
 8003d3e:	b18b      	cbz	r3, 8003d64 <_sungetc_r+0x44>
 8003d40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d42:	4293      	cmp	r3, r2
 8003d44:	dd08      	ble.n	8003d58 <_sungetc_r+0x38>
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	1e5a      	subs	r2, r3, #1
 8003d4a:	6022      	str	r2, [r4, #0]
 8003d4c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003d50:	6863      	ldr	r3, [r4, #4]
 8003d52:	3301      	adds	r3, #1
 8003d54:	6063      	str	r3, [r4, #4]
 8003d56:	e7e9      	b.n	8003d2c <_sungetc_r+0xc>
 8003d58:	4621      	mov	r1, r4
 8003d5a:	f000 fc2f 	bl	80045bc <__submore>
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	d0f1      	beq.n	8003d46 <_sungetc_r+0x26>
 8003d62:	e7e1      	b.n	8003d28 <_sungetc_r+0x8>
 8003d64:	6921      	ldr	r1, [r4, #16]
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	b151      	cbz	r1, 8003d80 <_sungetc_r+0x60>
 8003d6a:	4299      	cmp	r1, r3
 8003d6c:	d208      	bcs.n	8003d80 <_sungetc_r+0x60>
 8003d6e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003d72:	42a9      	cmp	r1, r5
 8003d74:	d104      	bne.n	8003d80 <_sungetc_r+0x60>
 8003d76:	3b01      	subs	r3, #1
 8003d78:	3201      	adds	r2, #1
 8003d7a:	6023      	str	r3, [r4, #0]
 8003d7c:	6062      	str	r2, [r4, #4]
 8003d7e:	e7d5      	b.n	8003d2c <_sungetc_r+0xc>
 8003d80:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d88:	6363      	str	r3, [r4, #52]	; 0x34
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	63a3      	str	r3, [r4, #56]	; 0x38
 8003d8e:	4623      	mov	r3, r4
 8003d90:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003d94:	6023      	str	r3, [r4, #0]
 8003d96:	2301      	movs	r3, #1
 8003d98:	e7dc      	b.n	8003d54 <_sungetc_r+0x34>

08003d9a <__ssrefill_r>:
 8003d9a:	b510      	push	{r4, lr}
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003da0:	b169      	cbz	r1, 8003dbe <__ssrefill_r+0x24>
 8003da2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003da6:	4299      	cmp	r1, r3
 8003da8:	d001      	beq.n	8003dae <__ssrefill_r+0x14>
 8003daa:	f000 fc71 	bl	8004690 <_free_r>
 8003dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003db0:	6063      	str	r3, [r4, #4]
 8003db2:	2000      	movs	r0, #0
 8003db4:	6360      	str	r0, [r4, #52]	; 0x34
 8003db6:	b113      	cbz	r3, 8003dbe <__ssrefill_r+0x24>
 8003db8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003dba:	6023      	str	r3, [r4, #0]
 8003dbc:	bd10      	pop	{r4, pc}
 8003dbe:	6923      	ldr	r3, [r4, #16]
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	6063      	str	r3, [r4, #4]
 8003dc6:	89a3      	ldrh	r3, [r4, #12]
 8003dc8:	f043 0320 	orr.w	r3, r3, #32
 8003dcc:	81a3      	strh	r3, [r4, #12]
 8003dce:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd2:	e7f3      	b.n	8003dbc <__ssrefill_r+0x22>

08003dd4 <__ssvfiscanf_r>:
 8003dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8003ddc:	460c      	mov	r4, r1
 8003dde:	2100      	movs	r1, #0
 8003de0:	9144      	str	r1, [sp, #272]	; 0x110
 8003de2:	9145      	str	r1, [sp, #276]	; 0x114
 8003de4:	499f      	ldr	r1, [pc, #636]	; (8004064 <__ssvfiscanf_r+0x290>)
 8003de6:	91a0      	str	r1, [sp, #640]	; 0x280
 8003de8:	f10d 0804 	add.w	r8, sp, #4
 8003dec:	499e      	ldr	r1, [pc, #632]	; (8004068 <__ssvfiscanf_r+0x294>)
 8003dee:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800406c <__ssvfiscanf_r+0x298>
 8003df2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003df6:	4606      	mov	r6, r0
 8003df8:	4692      	mov	sl, r2
 8003dfa:	91a1      	str	r1, [sp, #644]	; 0x284
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	270a      	movs	r7, #10
 8003e00:	f89a 3000 	ldrb.w	r3, [sl]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 812a 	beq.w	800405e <__ssvfiscanf_r+0x28a>
 8003e0a:	4655      	mov	r5, sl
 8003e0c:	f000 fc14 	bl	8004638 <__locale_ctype_ptr>
 8003e10:	f815 bb01 	ldrb.w	fp, [r5], #1
 8003e14:	4458      	add	r0, fp
 8003e16:	7843      	ldrb	r3, [r0, #1]
 8003e18:	f013 0308 	ands.w	r3, r3, #8
 8003e1c:	d01c      	beq.n	8003e58 <__ssvfiscanf_r+0x84>
 8003e1e:	6863      	ldr	r3, [r4, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	dd12      	ble.n	8003e4a <__ssvfiscanf_r+0x76>
 8003e24:	f000 fc08 	bl	8004638 <__locale_ctype_ptr>
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	781a      	ldrb	r2, [r3, #0]
 8003e2c:	4410      	add	r0, r2
 8003e2e:	7842      	ldrb	r2, [r0, #1]
 8003e30:	0712      	lsls	r2, r2, #28
 8003e32:	d401      	bmi.n	8003e38 <__ssvfiscanf_r+0x64>
 8003e34:	46aa      	mov	sl, r5
 8003e36:	e7e3      	b.n	8003e00 <__ssvfiscanf_r+0x2c>
 8003e38:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003e3a:	3201      	adds	r2, #1
 8003e3c:	9245      	str	r2, [sp, #276]	; 0x114
 8003e3e:	6862      	ldr	r2, [r4, #4]
 8003e40:	3301      	adds	r3, #1
 8003e42:	3a01      	subs	r2, #1
 8003e44:	6062      	str	r2, [r4, #4]
 8003e46:	6023      	str	r3, [r4, #0]
 8003e48:	e7e9      	b.n	8003e1e <__ssvfiscanf_r+0x4a>
 8003e4a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	4630      	mov	r0, r6
 8003e50:	4798      	blx	r3
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d0e6      	beq.n	8003e24 <__ssvfiscanf_r+0x50>
 8003e56:	e7ed      	b.n	8003e34 <__ssvfiscanf_r+0x60>
 8003e58:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8003e5c:	f040 8082 	bne.w	8003f64 <__ssvfiscanf_r+0x190>
 8003e60:	9343      	str	r3, [sp, #268]	; 0x10c
 8003e62:	9341      	str	r3, [sp, #260]	; 0x104
 8003e64:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8003e68:	2b2a      	cmp	r3, #42	; 0x2a
 8003e6a:	d103      	bne.n	8003e74 <__ssvfiscanf_r+0xa0>
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	9341      	str	r3, [sp, #260]	; 0x104
 8003e70:	f10a 0502 	add.w	r5, sl, #2
 8003e74:	46aa      	mov	sl, r5
 8003e76:	f815 1b01 	ldrb.w	r1, [r5], #1
 8003e7a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8003e7e:	2a09      	cmp	r2, #9
 8003e80:	d922      	bls.n	8003ec8 <__ssvfiscanf_r+0xf4>
 8003e82:	2203      	movs	r2, #3
 8003e84:	4879      	ldr	r0, [pc, #484]	; (800406c <__ssvfiscanf_r+0x298>)
 8003e86:	f7fc f9c3 	bl	8000210 <memchr>
 8003e8a:	b138      	cbz	r0, 8003e9c <__ssvfiscanf_r+0xc8>
 8003e8c:	eba0 0309 	sub.w	r3, r0, r9
 8003e90:	2001      	movs	r0, #1
 8003e92:	4098      	lsls	r0, r3
 8003e94:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003e96:	4318      	orrs	r0, r3
 8003e98:	9041      	str	r0, [sp, #260]	; 0x104
 8003e9a:	46aa      	mov	sl, r5
 8003e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8003ea0:	2b67      	cmp	r3, #103	; 0x67
 8003ea2:	f10a 0501 	add.w	r5, sl, #1
 8003ea6:	d82b      	bhi.n	8003f00 <__ssvfiscanf_r+0x12c>
 8003ea8:	2b65      	cmp	r3, #101	; 0x65
 8003eaa:	f080 809f 	bcs.w	8003fec <__ssvfiscanf_r+0x218>
 8003eae:	2b47      	cmp	r3, #71	; 0x47
 8003eb0:	d810      	bhi.n	8003ed4 <__ssvfiscanf_r+0x100>
 8003eb2:	2b45      	cmp	r3, #69	; 0x45
 8003eb4:	f080 809a 	bcs.w	8003fec <__ssvfiscanf_r+0x218>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d06c      	beq.n	8003f96 <__ssvfiscanf_r+0x1c2>
 8003ebc:	2b25      	cmp	r3, #37	; 0x25
 8003ebe:	d051      	beq.n	8003f64 <__ssvfiscanf_r+0x190>
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	9347      	str	r3, [sp, #284]	; 0x11c
 8003ec4:	9742      	str	r7, [sp, #264]	; 0x108
 8003ec6:	e027      	b.n	8003f18 <__ssvfiscanf_r+0x144>
 8003ec8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003eca:	fb07 1303 	mla	r3, r7, r3, r1
 8003ece:	3b30      	subs	r3, #48	; 0x30
 8003ed0:	9343      	str	r3, [sp, #268]	; 0x10c
 8003ed2:	e7cf      	b.n	8003e74 <__ssvfiscanf_r+0xa0>
 8003ed4:	2b5b      	cmp	r3, #91	; 0x5b
 8003ed6:	d06a      	beq.n	8003fae <__ssvfiscanf_r+0x1da>
 8003ed8:	d80c      	bhi.n	8003ef4 <__ssvfiscanf_r+0x120>
 8003eda:	2b58      	cmp	r3, #88	; 0x58
 8003edc:	d1f0      	bne.n	8003ec0 <__ssvfiscanf_r+0xec>
 8003ede:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee4:	9241      	str	r2, [sp, #260]	; 0x104
 8003ee6:	2210      	movs	r2, #16
 8003ee8:	9242      	str	r2, [sp, #264]	; 0x108
 8003eea:	2b6e      	cmp	r3, #110	; 0x6e
 8003eec:	bf8c      	ite	hi
 8003eee:	2304      	movhi	r3, #4
 8003ef0:	2303      	movls	r3, #3
 8003ef2:	e010      	b.n	8003f16 <__ssvfiscanf_r+0x142>
 8003ef4:	2b63      	cmp	r3, #99	; 0x63
 8003ef6:	d065      	beq.n	8003fc4 <__ssvfiscanf_r+0x1f0>
 8003ef8:	2b64      	cmp	r3, #100	; 0x64
 8003efa:	d1e1      	bne.n	8003ec0 <__ssvfiscanf_r+0xec>
 8003efc:	9742      	str	r7, [sp, #264]	; 0x108
 8003efe:	e7f4      	b.n	8003eea <__ssvfiscanf_r+0x116>
 8003f00:	2b70      	cmp	r3, #112	; 0x70
 8003f02:	d04b      	beq.n	8003f9c <__ssvfiscanf_r+0x1c8>
 8003f04:	d826      	bhi.n	8003f54 <__ssvfiscanf_r+0x180>
 8003f06:	2b6e      	cmp	r3, #110	; 0x6e
 8003f08:	d062      	beq.n	8003fd0 <__ssvfiscanf_r+0x1fc>
 8003f0a:	d84c      	bhi.n	8003fa6 <__ssvfiscanf_r+0x1d2>
 8003f0c:	2b69      	cmp	r3, #105	; 0x69
 8003f0e:	d1d7      	bne.n	8003ec0 <__ssvfiscanf_r+0xec>
 8003f10:	2300      	movs	r3, #0
 8003f12:	9342      	str	r3, [sp, #264]	; 0x108
 8003f14:	2303      	movs	r3, #3
 8003f16:	9347      	str	r3, [sp, #284]	; 0x11c
 8003f18:	6863      	ldr	r3, [r4, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	dd68      	ble.n	8003ff0 <__ssvfiscanf_r+0x21c>
 8003f1e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003f20:	0659      	lsls	r1, r3, #25
 8003f22:	d407      	bmi.n	8003f34 <__ssvfiscanf_r+0x160>
 8003f24:	f000 fb88 	bl	8004638 <__locale_ctype_ptr>
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	781a      	ldrb	r2, [r3, #0]
 8003f2c:	4410      	add	r0, r2
 8003f2e:	7842      	ldrb	r2, [r0, #1]
 8003f30:	0712      	lsls	r2, r2, #28
 8003f32:	d464      	bmi.n	8003ffe <__ssvfiscanf_r+0x22a>
 8003f34:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	dc73      	bgt.n	8004022 <__ssvfiscanf_r+0x24e>
 8003f3a:	466b      	mov	r3, sp
 8003f3c:	4622      	mov	r2, r4
 8003f3e:	a941      	add	r1, sp, #260	; 0x104
 8003f40:	4630      	mov	r0, r6
 8003f42:	f000 f897 	bl	8004074 <_scanf_chars>
 8003f46:	2801      	cmp	r0, #1
 8003f48:	f000 8089 	beq.w	800405e <__ssvfiscanf_r+0x28a>
 8003f4c:	2802      	cmp	r0, #2
 8003f4e:	f47f af71 	bne.w	8003e34 <__ssvfiscanf_r+0x60>
 8003f52:	e01d      	b.n	8003f90 <__ssvfiscanf_r+0x1bc>
 8003f54:	2b75      	cmp	r3, #117	; 0x75
 8003f56:	d0d1      	beq.n	8003efc <__ssvfiscanf_r+0x128>
 8003f58:	2b78      	cmp	r3, #120	; 0x78
 8003f5a:	d0c0      	beq.n	8003ede <__ssvfiscanf_r+0x10a>
 8003f5c:	2b73      	cmp	r3, #115	; 0x73
 8003f5e:	d1af      	bne.n	8003ec0 <__ssvfiscanf_r+0xec>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e7d8      	b.n	8003f16 <__ssvfiscanf_r+0x142>
 8003f64:	6863      	ldr	r3, [r4, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	dd0c      	ble.n	8003f84 <__ssvfiscanf_r+0x1b0>
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	781a      	ldrb	r2, [r3, #0]
 8003f6e:	455a      	cmp	r2, fp
 8003f70:	d175      	bne.n	800405e <__ssvfiscanf_r+0x28a>
 8003f72:	3301      	adds	r3, #1
 8003f74:	6862      	ldr	r2, [r4, #4]
 8003f76:	6023      	str	r3, [r4, #0]
 8003f78:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003f7a:	3a01      	subs	r2, #1
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	6062      	str	r2, [r4, #4]
 8003f80:	9345      	str	r3, [sp, #276]	; 0x114
 8003f82:	e757      	b.n	8003e34 <__ssvfiscanf_r+0x60>
 8003f84:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003f86:	4621      	mov	r1, r4
 8003f88:	4630      	mov	r0, r6
 8003f8a:	4798      	blx	r3
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	d0ec      	beq.n	8003f6a <__ssvfiscanf_r+0x196>
 8003f90:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d159      	bne.n	800404a <__ssvfiscanf_r+0x276>
 8003f96:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9a:	e05c      	b.n	8004056 <__ssvfiscanf_r+0x282>
 8003f9c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003f9e:	f042 0220 	orr.w	r2, r2, #32
 8003fa2:	9241      	str	r2, [sp, #260]	; 0x104
 8003fa4:	e79b      	b.n	8003ede <__ssvfiscanf_r+0x10a>
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	9342      	str	r3, [sp, #264]	; 0x108
 8003faa:	2304      	movs	r3, #4
 8003fac:	e7b3      	b.n	8003f16 <__ssvfiscanf_r+0x142>
 8003fae:	4629      	mov	r1, r5
 8003fb0:	4640      	mov	r0, r8
 8003fb2:	f000 f9b7 	bl	8004324 <__sccl>
 8003fb6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fbc:	9341      	str	r3, [sp, #260]	; 0x104
 8003fbe:	4605      	mov	r5, r0
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e7a8      	b.n	8003f16 <__ssvfiscanf_r+0x142>
 8003fc4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fca:	9341      	str	r3, [sp, #260]	; 0x104
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e7a2      	b.n	8003f16 <__ssvfiscanf_r+0x142>
 8003fd0:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003fd2:	06c3      	lsls	r3, r0, #27
 8003fd4:	f53f af2e 	bmi.w	8003e34 <__ssvfiscanf_r+0x60>
 8003fd8:	9b00      	ldr	r3, [sp, #0]
 8003fda:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003fdc:	1d19      	adds	r1, r3, #4
 8003fde:	9100      	str	r1, [sp, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	07c0      	lsls	r0, r0, #31
 8003fe4:	bf4c      	ite	mi
 8003fe6:	801a      	strhmi	r2, [r3, #0]
 8003fe8:	601a      	strpl	r2, [r3, #0]
 8003fea:	e723      	b.n	8003e34 <__ssvfiscanf_r+0x60>
 8003fec:	2305      	movs	r3, #5
 8003fee:	e792      	b.n	8003f16 <__ssvfiscanf_r+0x142>
 8003ff0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	4798      	blx	r3
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d090      	beq.n	8003f1e <__ssvfiscanf_r+0x14a>
 8003ffc:	e7c8      	b.n	8003f90 <__ssvfiscanf_r+0x1bc>
 8003ffe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004000:	3201      	adds	r2, #1
 8004002:	9245      	str	r2, [sp, #276]	; 0x114
 8004004:	6862      	ldr	r2, [r4, #4]
 8004006:	3a01      	subs	r2, #1
 8004008:	2a00      	cmp	r2, #0
 800400a:	6062      	str	r2, [r4, #4]
 800400c:	dd02      	ble.n	8004014 <__ssvfiscanf_r+0x240>
 800400e:	3301      	adds	r3, #1
 8004010:	6023      	str	r3, [r4, #0]
 8004012:	e787      	b.n	8003f24 <__ssvfiscanf_r+0x150>
 8004014:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004016:	4621      	mov	r1, r4
 8004018:	4630      	mov	r0, r6
 800401a:	4798      	blx	r3
 800401c:	2800      	cmp	r0, #0
 800401e:	d081      	beq.n	8003f24 <__ssvfiscanf_r+0x150>
 8004020:	e7b6      	b.n	8003f90 <__ssvfiscanf_r+0x1bc>
 8004022:	2b04      	cmp	r3, #4
 8004024:	dc06      	bgt.n	8004034 <__ssvfiscanf_r+0x260>
 8004026:	466b      	mov	r3, sp
 8004028:	4622      	mov	r2, r4
 800402a:	a941      	add	r1, sp, #260	; 0x104
 800402c:	4630      	mov	r0, r6
 800402e:	f000 f885 	bl	800413c <_scanf_i>
 8004032:	e788      	b.n	8003f46 <__ssvfiscanf_r+0x172>
 8004034:	4b0e      	ldr	r3, [pc, #56]	; (8004070 <__ssvfiscanf_r+0x29c>)
 8004036:	2b00      	cmp	r3, #0
 8004038:	f43f aefc 	beq.w	8003e34 <__ssvfiscanf_r+0x60>
 800403c:	466b      	mov	r3, sp
 800403e:	4622      	mov	r2, r4
 8004040:	a941      	add	r1, sp, #260	; 0x104
 8004042:	4630      	mov	r0, r6
 8004044:	f3af 8000 	nop.w
 8004048:	e77d      	b.n	8003f46 <__ssvfiscanf_r+0x172>
 800404a:	89a3      	ldrh	r3, [r4, #12]
 800404c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004050:	bf18      	it	ne
 8004052:	f04f 30ff 	movne.w	r0, #4294967295
 8004056:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800405a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800405e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004060:	e7f9      	b.n	8004056 <__ssvfiscanf_r+0x282>
 8004062:	bf00      	nop
 8004064:	08003d21 	.word	0x08003d21
 8004068:	08003d9b 	.word	0x08003d9b
 800406c:	08004904 	.word	0x08004904
 8004070:	00000000 	.word	0x00000000

08004074 <_scanf_chars>:
 8004074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004078:	4615      	mov	r5, r2
 800407a:	688a      	ldr	r2, [r1, #8]
 800407c:	4680      	mov	r8, r0
 800407e:	460c      	mov	r4, r1
 8004080:	b932      	cbnz	r2, 8004090 <_scanf_chars+0x1c>
 8004082:	698a      	ldr	r2, [r1, #24]
 8004084:	2a00      	cmp	r2, #0
 8004086:	bf14      	ite	ne
 8004088:	f04f 32ff 	movne.w	r2, #4294967295
 800408c:	2201      	moveq	r2, #1
 800408e:	608a      	str	r2, [r1, #8]
 8004090:	6822      	ldr	r2, [r4, #0]
 8004092:	06d1      	lsls	r1, r2, #27
 8004094:	bf5f      	itttt	pl
 8004096:	681a      	ldrpl	r2, [r3, #0]
 8004098:	1d11      	addpl	r1, r2, #4
 800409a:	6019      	strpl	r1, [r3, #0]
 800409c:	6817      	ldrpl	r7, [r2, #0]
 800409e:	2600      	movs	r6, #0
 80040a0:	69a3      	ldr	r3, [r4, #24]
 80040a2:	b1db      	cbz	r3, 80040dc <_scanf_chars+0x68>
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d107      	bne.n	80040b8 <_scanf_chars+0x44>
 80040a8:	682b      	ldr	r3, [r5, #0]
 80040aa:	6962      	ldr	r2, [r4, #20]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	5cd3      	ldrb	r3, [r2, r3]
 80040b0:	b9a3      	cbnz	r3, 80040dc <_scanf_chars+0x68>
 80040b2:	2e00      	cmp	r6, #0
 80040b4:	d132      	bne.n	800411c <_scanf_chars+0xa8>
 80040b6:	e006      	b.n	80040c6 <_scanf_chars+0x52>
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d007      	beq.n	80040cc <_scanf_chars+0x58>
 80040bc:	2e00      	cmp	r6, #0
 80040be:	d12d      	bne.n	800411c <_scanf_chars+0xa8>
 80040c0:	69a3      	ldr	r3, [r4, #24]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d12a      	bne.n	800411c <_scanf_chars+0xa8>
 80040c6:	2001      	movs	r0, #1
 80040c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040cc:	f000 fab4 	bl	8004638 <__locale_ctype_ptr>
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	4418      	add	r0, r3
 80040d6:	7843      	ldrb	r3, [r0, #1]
 80040d8:	071b      	lsls	r3, r3, #28
 80040da:	d4ef      	bmi.n	80040bc <_scanf_chars+0x48>
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	06da      	lsls	r2, r3, #27
 80040e0:	bf5e      	ittt	pl
 80040e2:	682b      	ldrpl	r3, [r5, #0]
 80040e4:	781b      	ldrbpl	r3, [r3, #0]
 80040e6:	703b      	strbpl	r3, [r7, #0]
 80040e8:	682a      	ldr	r2, [r5, #0]
 80040ea:	686b      	ldr	r3, [r5, #4]
 80040ec:	f102 0201 	add.w	r2, r2, #1
 80040f0:	602a      	str	r2, [r5, #0]
 80040f2:	68a2      	ldr	r2, [r4, #8]
 80040f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80040f8:	f102 32ff 	add.w	r2, r2, #4294967295
 80040fc:	606b      	str	r3, [r5, #4]
 80040fe:	f106 0601 	add.w	r6, r6, #1
 8004102:	bf58      	it	pl
 8004104:	3701      	addpl	r7, #1
 8004106:	60a2      	str	r2, [r4, #8]
 8004108:	b142      	cbz	r2, 800411c <_scanf_chars+0xa8>
 800410a:	2b00      	cmp	r3, #0
 800410c:	dcc8      	bgt.n	80040a0 <_scanf_chars+0x2c>
 800410e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004112:	4629      	mov	r1, r5
 8004114:	4640      	mov	r0, r8
 8004116:	4798      	blx	r3
 8004118:	2800      	cmp	r0, #0
 800411a:	d0c1      	beq.n	80040a0 <_scanf_chars+0x2c>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	f013 0310 	ands.w	r3, r3, #16
 8004122:	d105      	bne.n	8004130 <_scanf_chars+0xbc>
 8004124:	68e2      	ldr	r2, [r4, #12]
 8004126:	3201      	adds	r2, #1
 8004128:	60e2      	str	r2, [r4, #12]
 800412a:	69a2      	ldr	r2, [r4, #24]
 800412c:	b102      	cbz	r2, 8004130 <_scanf_chars+0xbc>
 800412e:	703b      	strb	r3, [r7, #0]
 8004130:	6923      	ldr	r3, [r4, #16]
 8004132:	441e      	add	r6, r3
 8004134:	6126      	str	r6, [r4, #16]
 8004136:	2000      	movs	r0, #0
 8004138:	e7c6      	b.n	80040c8 <_scanf_chars+0x54>
	...

0800413c <_scanf_i>:
 800413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004140:	469a      	mov	sl, r3
 8004142:	4b74      	ldr	r3, [pc, #464]	; (8004314 <_scanf_i+0x1d8>)
 8004144:	460c      	mov	r4, r1
 8004146:	4683      	mov	fp, r0
 8004148:	4616      	mov	r6, r2
 800414a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800414e:	b087      	sub	sp, #28
 8004150:	ab03      	add	r3, sp, #12
 8004152:	68a7      	ldr	r7, [r4, #8]
 8004154:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004158:	4b6f      	ldr	r3, [pc, #444]	; (8004318 <_scanf_i+0x1dc>)
 800415a:	69a1      	ldr	r1, [r4, #24]
 800415c:	4a6f      	ldr	r2, [pc, #444]	; (800431c <_scanf_i+0x1e0>)
 800415e:	2903      	cmp	r1, #3
 8004160:	bf08      	it	eq
 8004162:	461a      	moveq	r2, r3
 8004164:	1e7b      	subs	r3, r7, #1
 8004166:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800416a:	bf84      	itt	hi
 800416c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004170:	60a3      	strhi	r3, [r4, #8]
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	9200      	str	r2, [sp, #0]
 8004176:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800417a:	bf88      	it	hi
 800417c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004180:	f104 091c 	add.w	r9, r4, #28
 8004184:	6023      	str	r3, [r4, #0]
 8004186:	bf8c      	ite	hi
 8004188:	197f      	addhi	r7, r7, r5
 800418a:	2700      	movls	r7, #0
 800418c:	464b      	mov	r3, r9
 800418e:	f04f 0800 	mov.w	r8, #0
 8004192:	9301      	str	r3, [sp, #4]
 8004194:	6831      	ldr	r1, [r6, #0]
 8004196:	ab03      	add	r3, sp, #12
 8004198:	2202      	movs	r2, #2
 800419a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800419e:	7809      	ldrb	r1, [r1, #0]
 80041a0:	f7fc f836 	bl	8000210 <memchr>
 80041a4:	9b01      	ldr	r3, [sp, #4]
 80041a6:	b330      	cbz	r0, 80041f6 <_scanf_i+0xba>
 80041a8:	f1b8 0f01 	cmp.w	r8, #1
 80041ac:	d15a      	bne.n	8004264 <_scanf_i+0x128>
 80041ae:	6862      	ldr	r2, [r4, #4]
 80041b0:	b92a      	cbnz	r2, 80041be <_scanf_i+0x82>
 80041b2:	6822      	ldr	r2, [r4, #0]
 80041b4:	2108      	movs	r1, #8
 80041b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ba:	6061      	str	r1, [r4, #4]
 80041bc:	6022      	str	r2, [r4, #0]
 80041be:	6822      	ldr	r2, [r4, #0]
 80041c0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80041c4:	6022      	str	r2, [r4, #0]
 80041c6:	68a2      	ldr	r2, [r4, #8]
 80041c8:	1e51      	subs	r1, r2, #1
 80041ca:	60a1      	str	r1, [r4, #8]
 80041cc:	b19a      	cbz	r2, 80041f6 <_scanf_i+0xba>
 80041ce:	6832      	ldr	r2, [r6, #0]
 80041d0:	1c51      	adds	r1, r2, #1
 80041d2:	6031      	str	r1, [r6, #0]
 80041d4:	7812      	ldrb	r2, [r2, #0]
 80041d6:	701a      	strb	r2, [r3, #0]
 80041d8:	1c5d      	adds	r5, r3, #1
 80041da:	6873      	ldr	r3, [r6, #4]
 80041dc:	3b01      	subs	r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	6073      	str	r3, [r6, #4]
 80041e2:	dc07      	bgt.n	80041f4 <_scanf_i+0xb8>
 80041e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80041e8:	4631      	mov	r1, r6
 80041ea:	4658      	mov	r0, fp
 80041ec:	4798      	blx	r3
 80041ee:	2800      	cmp	r0, #0
 80041f0:	f040 8086 	bne.w	8004300 <_scanf_i+0x1c4>
 80041f4:	462b      	mov	r3, r5
 80041f6:	f108 0801 	add.w	r8, r8, #1
 80041fa:	f1b8 0f03 	cmp.w	r8, #3
 80041fe:	d1c8      	bne.n	8004192 <_scanf_i+0x56>
 8004200:	6862      	ldr	r2, [r4, #4]
 8004202:	b90a      	cbnz	r2, 8004208 <_scanf_i+0xcc>
 8004204:	220a      	movs	r2, #10
 8004206:	6062      	str	r2, [r4, #4]
 8004208:	6862      	ldr	r2, [r4, #4]
 800420a:	4945      	ldr	r1, [pc, #276]	; (8004320 <_scanf_i+0x1e4>)
 800420c:	6960      	ldr	r0, [r4, #20]
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	1a89      	subs	r1, r1, r2
 8004212:	f000 f887 	bl	8004324 <__sccl>
 8004216:	9b01      	ldr	r3, [sp, #4]
 8004218:	f04f 0800 	mov.w	r8, #0
 800421c:	461d      	mov	r5, r3
 800421e:	68a3      	ldr	r3, [r4, #8]
 8004220:	6822      	ldr	r2, [r4, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d03a      	beq.n	800429c <_scanf_i+0x160>
 8004226:	6831      	ldr	r1, [r6, #0]
 8004228:	6960      	ldr	r0, [r4, #20]
 800422a:	f891 c000 	ldrb.w	ip, [r1]
 800422e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004232:	2800      	cmp	r0, #0
 8004234:	d032      	beq.n	800429c <_scanf_i+0x160>
 8004236:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800423a:	d121      	bne.n	8004280 <_scanf_i+0x144>
 800423c:	0510      	lsls	r0, r2, #20
 800423e:	d51f      	bpl.n	8004280 <_scanf_i+0x144>
 8004240:	f108 0801 	add.w	r8, r8, #1
 8004244:	b117      	cbz	r7, 800424c <_scanf_i+0x110>
 8004246:	3301      	adds	r3, #1
 8004248:	3f01      	subs	r7, #1
 800424a:	60a3      	str	r3, [r4, #8]
 800424c:	6873      	ldr	r3, [r6, #4]
 800424e:	3b01      	subs	r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	6073      	str	r3, [r6, #4]
 8004254:	dd1b      	ble.n	800428e <_scanf_i+0x152>
 8004256:	6833      	ldr	r3, [r6, #0]
 8004258:	3301      	adds	r3, #1
 800425a:	6033      	str	r3, [r6, #0]
 800425c:	68a3      	ldr	r3, [r4, #8]
 800425e:	3b01      	subs	r3, #1
 8004260:	60a3      	str	r3, [r4, #8]
 8004262:	e7dc      	b.n	800421e <_scanf_i+0xe2>
 8004264:	f1b8 0f02 	cmp.w	r8, #2
 8004268:	d1ad      	bne.n	80041c6 <_scanf_i+0x8a>
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004270:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004274:	d1bf      	bne.n	80041f6 <_scanf_i+0xba>
 8004276:	2110      	movs	r1, #16
 8004278:	6061      	str	r1, [r4, #4]
 800427a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800427e:	e7a1      	b.n	80041c4 <_scanf_i+0x88>
 8004280:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004284:	6022      	str	r2, [r4, #0]
 8004286:	780b      	ldrb	r3, [r1, #0]
 8004288:	702b      	strb	r3, [r5, #0]
 800428a:	3501      	adds	r5, #1
 800428c:	e7de      	b.n	800424c <_scanf_i+0x110>
 800428e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004292:	4631      	mov	r1, r6
 8004294:	4658      	mov	r0, fp
 8004296:	4798      	blx	r3
 8004298:	2800      	cmp	r0, #0
 800429a:	d0df      	beq.n	800425c <_scanf_i+0x120>
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	05d9      	lsls	r1, r3, #23
 80042a0:	d50c      	bpl.n	80042bc <_scanf_i+0x180>
 80042a2:	454d      	cmp	r5, r9
 80042a4:	d908      	bls.n	80042b8 <_scanf_i+0x17c>
 80042a6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80042aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80042ae:	4632      	mov	r2, r6
 80042b0:	4658      	mov	r0, fp
 80042b2:	4798      	blx	r3
 80042b4:	1e6f      	subs	r7, r5, #1
 80042b6:	463d      	mov	r5, r7
 80042b8:	454d      	cmp	r5, r9
 80042ba:	d029      	beq.n	8004310 <_scanf_i+0x1d4>
 80042bc:	6822      	ldr	r2, [r4, #0]
 80042be:	f012 0210 	ands.w	r2, r2, #16
 80042c2:	d113      	bne.n	80042ec <_scanf_i+0x1b0>
 80042c4:	702a      	strb	r2, [r5, #0]
 80042c6:	6863      	ldr	r3, [r4, #4]
 80042c8:	9e00      	ldr	r6, [sp, #0]
 80042ca:	4649      	mov	r1, r9
 80042cc:	4658      	mov	r0, fp
 80042ce:	47b0      	blx	r6
 80042d0:	f8da 3000 	ldr.w	r3, [sl]
 80042d4:	6821      	ldr	r1, [r4, #0]
 80042d6:	1d1a      	adds	r2, r3, #4
 80042d8:	f8ca 2000 	str.w	r2, [sl]
 80042dc:	f011 0f20 	tst.w	r1, #32
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	d010      	beq.n	8004306 <_scanf_i+0x1ca>
 80042e4:	6018      	str	r0, [r3, #0]
 80042e6:	68e3      	ldr	r3, [r4, #12]
 80042e8:	3301      	adds	r3, #1
 80042ea:	60e3      	str	r3, [r4, #12]
 80042ec:	eba5 0509 	sub.w	r5, r5, r9
 80042f0:	44a8      	add	r8, r5
 80042f2:	6925      	ldr	r5, [r4, #16]
 80042f4:	4445      	add	r5, r8
 80042f6:	6125      	str	r5, [r4, #16]
 80042f8:	2000      	movs	r0, #0
 80042fa:	b007      	add	sp, #28
 80042fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004300:	f04f 0800 	mov.w	r8, #0
 8004304:	e7ca      	b.n	800429c <_scanf_i+0x160>
 8004306:	07ca      	lsls	r2, r1, #31
 8004308:	bf4c      	ite	mi
 800430a:	8018      	strhmi	r0, [r3, #0]
 800430c:	6018      	strpl	r0, [r3, #0]
 800430e:	e7ea      	b.n	80042e6 <_scanf_i+0x1aa>
 8004310:	2001      	movs	r0, #1
 8004312:	e7f2      	b.n	80042fa <_scanf_i+0x1be>
 8004314:	080048c0 	.word	0x080048c0
 8004318:	08004481 	.word	0x08004481
 800431c:	08004599 	.word	0x08004599
 8004320:	08004918 	.word	0x08004918

08004324 <__sccl>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	780b      	ldrb	r3, [r1, #0]
 8004328:	2b5e      	cmp	r3, #94	; 0x5e
 800432a:	bf13      	iteet	ne
 800432c:	1c4a      	addne	r2, r1, #1
 800432e:	1c8a      	addeq	r2, r1, #2
 8004330:	784b      	ldrbeq	r3, [r1, #1]
 8004332:	2100      	movne	r1, #0
 8004334:	bf08      	it	eq
 8004336:	2101      	moveq	r1, #1
 8004338:	1e44      	subs	r4, r0, #1
 800433a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800433e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8004342:	42ac      	cmp	r4, r5
 8004344:	d1fb      	bne.n	800433e <__sccl+0x1a>
 8004346:	b913      	cbnz	r3, 800434e <__sccl+0x2a>
 8004348:	3a01      	subs	r2, #1
 800434a:	4610      	mov	r0, r2
 800434c:	bd70      	pop	{r4, r5, r6, pc}
 800434e:	f081 0401 	eor.w	r4, r1, #1
 8004352:	54c4      	strb	r4, [r0, r3]
 8004354:	1c51      	adds	r1, r2, #1
 8004356:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800435a:	2d2d      	cmp	r5, #45	; 0x2d
 800435c:	f101 36ff 	add.w	r6, r1, #4294967295
 8004360:	460a      	mov	r2, r1
 8004362:	d006      	beq.n	8004372 <__sccl+0x4e>
 8004364:	2d5d      	cmp	r5, #93	; 0x5d
 8004366:	d0f0      	beq.n	800434a <__sccl+0x26>
 8004368:	b90d      	cbnz	r5, 800436e <__sccl+0x4a>
 800436a:	4632      	mov	r2, r6
 800436c:	e7ed      	b.n	800434a <__sccl+0x26>
 800436e:	462b      	mov	r3, r5
 8004370:	e7ef      	b.n	8004352 <__sccl+0x2e>
 8004372:	780e      	ldrb	r6, [r1, #0]
 8004374:	2e5d      	cmp	r6, #93	; 0x5d
 8004376:	d0fa      	beq.n	800436e <__sccl+0x4a>
 8004378:	42b3      	cmp	r3, r6
 800437a:	dcf8      	bgt.n	800436e <__sccl+0x4a>
 800437c:	3301      	adds	r3, #1
 800437e:	429e      	cmp	r6, r3
 8004380:	54c4      	strb	r4, [r0, r3]
 8004382:	dcfb      	bgt.n	800437c <__sccl+0x58>
 8004384:	3102      	adds	r1, #2
 8004386:	e7e6      	b.n	8004356 <__sccl+0x32>

08004388 <_strtol_l.isra.0>:
 8004388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800438c:	4680      	mov	r8, r0
 800438e:	4689      	mov	r9, r1
 8004390:	4692      	mov	sl, r2
 8004392:	461e      	mov	r6, r3
 8004394:	460f      	mov	r7, r1
 8004396:	463d      	mov	r5, r7
 8004398:	9808      	ldr	r0, [sp, #32]
 800439a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800439e:	f000 f947 	bl	8004630 <__locale_ctype_ptr_l>
 80043a2:	4420      	add	r0, r4
 80043a4:	7843      	ldrb	r3, [r0, #1]
 80043a6:	f013 0308 	ands.w	r3, r3, #8
 80043aa:	d132      	bne.n	8004412 <_strtol_l.isra.0+0x8a>
 80043ac:	2c2d      	cmp	r4, #45	; 0x2d
 80043ae:	d132      	bne.n	8004416 <_strtol_l.isra.0+0x8e>
 80043b0:	787c      	ldrb	r4, [r7, #1]
 80043b2:	1cbd      	adds	r5, r7, #2
 80043b4:	2201      	movs	r2, #1
 80043b6:	2e00      	cmp	r6, #0
 80043b8:	d05d      	beq.n	8004476 <_strtol_l.isra.0+0xee>
 80043ba:	2e10      	cmp	r6, #16
 80043bc:	d109      	bne.n	80043d2 <_strtol_l.isra.0+0x4a>
 80043be:	2c30      	cmp	r4, #48	; 0x30
 80043c0:	d107      	bne.n	80043d2 <_strtol_l.isra.0+0x4a>
 80043c2:	782b      	ldrb	r3, [r5, #0]
 80043c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80043c8:	2b58      	cmp	r3, #88	; 0x58
 80043ca:	d14f      	bne.n	800446c <_strtol_l.isra.0+0xe4>
 80043cc:	786c      	ldrb	r4, [r5, #1]
 80043ce:	2610      	movs	r6, #16
 80043d0:	3502      	adds	r5, #2
 80043d2:	2a00      	cmp	r2, #0
 80043d4:	bf14      	ite	ne
 80043d6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80043da:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80043de:	2700      	movs	r7, #0
 80043e0:	fbb1 fcf6 	udiv	ip, r1, r6
 80043e4:	4638      	mov	r0, r7
 80043e6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80043ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80043ee:	2b09      	cmp	r3, #9
 80043f0:	d817      	bhi.n	8004422 <_strtol_l.isra.0+0x9a>
 80043f2:	461c      	mov	r4, r3
 80043f4:	42a6      	cmp	r6, r4
 80043f6:	dd23      	ble.n	8004440 <_strtol_l.isra.0+0xb8>
 80043f8:	1c7b      	adds	r3, r7, #1
 80043fa:	d007      	beq.n	800440c <_strtol_l.isra.0+0x84>
 80043fc:	4584      	cmp	ip, r0
 80043fe:	d31c      	bcc.n	800443a <_strtol_l.isra.0+0xb2>
 8004400:	d101      	bne.n	8004406 <_strtol_l.isra.0+0x7e>
 8004402:	45a6      	cmp	lr, r4
 8004404:	db19      	blt.n	800443a <_strtol_l.isra.0+0xb2>
 8004406:	fb00 4006 	mla	r0, r0, r6, r4
 800440a:	2701      	movs	r7, #1
 800440c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004410:	e7eb      	b.n	80043ea <_strtol_l.isra.0+0x62>
 8004412:	462f      	mov	r7, r5
 8004414:	e7bf      	b.n	8004396 <_strtol_l.isra.0+0xe>
 8004416:	2c2b      	cmp	r4, #43	; 0x2b
 8004418:	bf04      	itt	eq
 800441a:	1cbd      	addeq	r5, r7, #2
 800441c:	787c      	ldrbeq	r4, [r7, #1]
 800441e:	461a      	mov	r2, r3
 8004420:	e7c9      	b.n	80043b6 <_strtol_l.isra.0+0x2e>
 8004422:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004426:	2b19      	cmp	r3, #25
 8004428:	d801      	bhi.n	800442e <_strtol_l.isra.0+0xa6>
 800442a:	3c37      	subs	r4, #55	; 0x37
 800442c:	e7e2      	b.n	80043f4 <_strtol_l.isra.0+0x6c>
 800442e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004432:	2b19      	cmp	r3, #25
 8004434:	d804      	bhi.n	8004440 <_strtol_l.isra.0+0xb8>
 8004436:	3c57      	subs	r4, #87	; 0x57
 8004438:	e7dc      	b.n	80043f4 <_strtol_l.isra.0+0x6c>
 800443a:	f04f 37ff 	mov.w	r7, #4294967295
 800443e:	e7e5      	b.n	800440c <_strtol_l.isra.0+0x84>
 8004440:	1c7b      	adds	r3, r7, #1
 8004442:	d108      	bne.n	8004456 <_strtol_l.isra.0+0xce>
 8004444:	2322      	movs	r3, #34	; 0x22
 8004446:	f8c8 3000 	str.w	r3, [r8]
 800444a:	4608      	mov	r0, r1
 800444c:	f1ba 0f00 	cmp.w	sl, #0
 8004450:	d107      	bne.n	8004462 <_strtol_l.isra.0+0xda>
 8004452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004456:	b102      	cbz	r2, 800445a <_strtol_l.isra.0+0xd2>
 8004458:	4240      	negs	r0, r0
 800445a:	f1ba 0f00 	cmp.w	sl, #0
 800445e:	d0f8      	beq.n	8004452 <_strtol_l.isra.0+0xca>
 8004460:	b10f      	cbz	r7, 8004466 <_strtol_l.isra.0+0xde>
 8004462:	f105 39ff 	add.w	r9, r5, #4294967295
 8004466:	f8ca 9000 	str.w	r9, [sl]
 800446a:	e7f2      	b.n	8004452 <_strtol_l.isra.0+0xca>
 800446c:	2430      	movs	r4, #48	; 0x30
 800446e:	2e00      	cmp	r6, #0
 8004470:	d1af      	bne.n	80043d2 <_strtol_l.isra.0+0x4a>
 8004472:	2608      	movs	r6, #8
 8004474:	e7ad      	b.n	80043d2 <_strtol_l.isra.0+0x4a>
 8004476:	2c30      	cmp	r4, #48	; 0x30
 8004478:	d0a3      	beq.n	80043c2 <_strtol_l.isra.0+0x3a>
 800447a:	260a      	movs	r6, #10
 800447c:	e7a9      	b.n	80043d2 <_strtol_l.isra.0+0x4a>
	...

08004480 <_strtol_r>:
 8004480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004482:	4c06      	ldr	r4, [pc, #24]	; (800449c <_strtol_r+0x1c>)
 8004484:	4d06      	ldr	r5, [pc, #24]	; (80044a0 <_strtol_r+0x20>)
 8004486:	6824      	ldr	r4, [r4, #0]
 8004488:	6a24      	ldr	r4, [r4, #32]
 800448a:	2c00      	cmp	r4, #0
 800448c:	bf08      	it	eq
 800448e:	462c      	moveq	r4, r5
 8004490:	9400      	str	r4, [sp, #0]
 8004492:	f7ff ff79 	bl	8004388 <_strtol_l.isra.0>
 8004496:	b003      	add	sp, #12
 8004498:	bd30      	pop	{r4, r5, pc}
 800449a:	bf00      	nop
 800449c:	20000048 	.word	0x20000048
 80044a0:	200000ac 	.word	0x200000ac

080044a4 <_strtoul_l.isra.0>:
 80044a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a8:	4680      	mov	r8, r0
 80044aa:	4689      	mov	r9, r1
 80044ac:	4692      	mov	sl, r2
 80044ae:	461e      	mov	r6, r3
 80044b0:	460f      	mov	r7, r1
 80044b2:	463d      	mov	r5, r7
 80044b4:	9808      	ldr	r0, [sp, #32]
 80044b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044ba:	f000 f8b9 	bl	8004630 <__locale_ctype_ptr_l>
 80044be:	4420      	add	r0, r4
 80044c0:	7843      	ldrb	r3, [r0, #1]
 80044c2:	f013 0308 	ands.w	r3, r3, #8
 80044c6:	d130      	bne.n	800452a <_strtoul_l.isra.0+0x86>
 80044c8:	2c2d      	cmp	r4, #45	; 0x2d
 80044ca:	d130      	bne.n	800452e <_strtoul_l.isra.0+0x8a>
 80044cc:	787c      	ldrb	r4, [r7, #1]
 80044ce:	1cbd      	adds	r5, r7, #2
 80044d0:	2101      	movs	r1, #1
 80044d2:	2e00      	cmp	r6, #0
 80044d4:	d05c      	beq.n	8004590 <_strtoul_l.isra.0+0xec>
 80044d6:	2e10      	cmp	r6, #16
 80044d8:	d109      	bne.n	80044ee <_strtoul_l.isra.0+0x4a>
 80044da:	2c30      	cmp	r4, #48	; 0x30
 80044dc:	d107      	bne.n	80044ee <_strtoul_l.isra.0+0x4a>
 80044de:	782b      	ldrb	r3, [r5, #0]
 80044e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80044e4:	2b58      	cmp	r3, #88	; 0x58
 80044e6:	d14e      	bne.n	8004586 <_strtoul_l.isra.0+0xe2>
 80044e8:	786c      	ldrb	r4, [r5, #1]
 80044ea:	2610      	movs	r6, #16
 80044ec:	3502      	adds	r5, #2
 80044ee:	f04f 32ff 	mov.w	r2, #4294967295
 80044f2:	2300      	movs	r3, #0
 80044f4:	fbb2 f2f6 	udiv	r2, r2, r6
 80044f8:	fb06 fc02 	mul.w	ip, r6, r2
 80044fc:	ea6f 0c0c 	mvn.w	ip, ip
 8004500:	4618      	mov	r0, r3
 8004502:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004506:	2f09      	cmp	r7, #9
 8004508:	d817      	bhi.n	800453a <_strtoul_l.isra.0+0x96>
 800450a:	463c      	mov	r4, r7
 800450c:	42a6      	cmp	r6, r4
 800450e:	dd23      	ble.n	8004558 <_strtoul_l.isra.0+0xb4>
 8004510:	2b00      	cmp	r3, #0
 8004512:	db1e      	blt.n	8004552 <_strtoul_l.isra.0+0xae>
 8004514:	4282      	cmp	r2, r0
 8004516:	d31c      	bcc.n	8004552 <_strtoul_l.isra.0+0xae>
 8004518:	d101      	bne.n	800451e <_strtoul_l.isra.0+0x7a>
 800451a:	45a4      	cmp	ip, r4
 800451c:	db19      	blt.n	8004552 <_strtoul_l.isra.0+0xae>
 800451e:	fb00 4006 	mla	r0, r0, r6, r4
 8004522:	2301      	movs	r3, #1
 8004524:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004528:	e7eb      	b.n	8004502 <_strtoul_l.isra.0+0x5e>
 800452a:	462f      	mov	r7, r5
 800452c:	e7c1      	b.n	80044b2 <_strtoul_l.isra.0+0xe>
 800452e:	2c2b      	cmp	r4, #43	; 0x2b
 8004530:	bf04      	itt	eq
 8004532:	1cbd      	addeq	r5, r7, #2
 8004534:	787c      	ldrbeq	r4, [r7, #1]
 8004536:	4619      	mov	r1, r3
 8004538:	e7cb      	b.n	80044d2 <_strtoul_l.isra.0+0x2e>
 800453a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800453e:	2f19      	cmp	r7, #25
 8004540:	d801      	bhi.n	8004546 <_strtoul_l.isra.0+0xa2>
 8004542:	3c37      	subs	r4, #55	; 0x37
 8004544:	e7e2      	b.n	800450c <_strtoul_l.isra.0+0x68>
 8004546:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800454a:	2f19      	cmp	r7, #25
 800454c:	d804      	bhi.n	8004558 <_strtoul_l.isra.0+0xb4>
 800454e:	3c57      	subs	r4, #87	; 0x57
 8004550:	e7dc      	b.n	800450c <_strtoul_l.isra.0+0x68>
 8004552:	f04f 33ff 	mov.w	r3, #4294967295
 8004556:	e7e5      	b.n	8004524 <_strtoul_l.isra.0+0x80>
 8004558:	2b00      	cmp	r3, #0
 800455a:	da09      	bge.n	8004570 <_strtoul_l.isra.0+0xcc>
 800455c:	2322      	movs	r3, #34	; 0x22
 800455e:	f8c8 3000 	str.w	r3, [r8]
 8004562:	f04f 30ff 	mov.w	r0, #4294967295
 8004566:	f1ba 0f00 	cmp.w	sl, #0
 800456a:	d107      	bne.n	800457c <_strtoul_l.isra.0+0xd8>
 800456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004570:	b101      	cbz	r1, 8004574 <_strtoul_l.isra.0+0xd0>
 8004572:	4240      	negs	r0, r0
 8004574:	f1ba 0f00 	cmp.w	sl, #0
 8004578:	d0f8      	beq.n	800456c <_strtoul_l.isra.0+0xc8>
 800457a:	b10b      	cbz	r3, 8004580 <_strtoul_l.isra.0+0xdc>
 800457c:	f105 39ff 	add.w	r9, r5, #4294967295
 8004580:	f8ca 9000 	str.w	r9, [sl]
 8004584:	e7f2      	b.n	800456c <_strtoul_l.isra.0+0xc8>
 8004586:	2430      	movs	r4, #48	; 0x30
 8004588:	2e00      	cmp	r6, #0
 800458a:	d1b0      	bne.n	80044ee <_strtoul_l.isra.0+0x4a>
 800458c:	2608      	movs	r6, #8
 800458e:	e7ae      	b.n	80044ee <_strtoul_l.isra.0+0x4a>
 8004590:	2c30      	cmp	r4, #48	; 0x30
 8004592:	d0a4      	beq.n	80044de <_strtoul_l.isra.0+0x3a>
 8004594:	260a      	movs	r6, #10
 8004596:	e7aa      	b.n	80044ee <_strtoul_l.isra.0+0x4a>

08004598 <_strtoul_r>:
 8004598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800459a:	4c06      	ldr	r4, [pc, #24]	; (80045b4 <_strtoul_r+0x1c>)
 800459c:	4d06      	ldr	r5, [pc, #24]	; (80045b8 <_strtoul_r+0x20>)
 800459e:	6824      	ldr	r4, [r4, #0]
 80045a0:	6a24      	ldr	r4, [r4, #32]
 80045a2:	2c00      	cmp	r4, #0
 80045a4:	bf08      	it	eq
 80045a6:	462c      	moveq	r4, r5
 80045a8:	9400      	str	r4, [sp, #0]
 80045aa:	f7ff ff7b 	bl	80044a4 <_strtoul_l.isra.0>
 80045ae:	b003      	add	sp, #12
 80045b0:	bd30      	pop	{r4, r5, pc}
 80045b2:	bf00      	nop
 80045b4:	20000048 	.word	0x20000048
 80045b8:	200000ac 	.word	0x200000ac

080045bc <__submore>:
 80045bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c0:	460c      	mov	r4, r1
 80045c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80045c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045c8:	4299      	cmp	r1, r3
 80045ca:	d11d      	bne.n	8004608 <__submore+0x4c>
 80045cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80045d0:	f000 f8ac 	bl	800472c <_malloc_r>
 80045d4:	b918      	cbnz	r0, 80045de <__submore+0x22>
 80045d6:	f04f 30ff 	mov.w	r0, #4294967295
 80045da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e2:	63a3      	str	r3, [r4, #56]	; 0x38
 80045e4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80045e8:	6360      	str	r0, [r4, #52]	; 0x34
 80045ea:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80045ee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80045f2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80045f6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80045fa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80045fe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004602:	6020      	str	r0, [r4, #0]
 8004604:	2000      	movs	r0, #0
 8004606:	e7e8      	b.n	80045da <__submore+0x1e>
 8004608:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800460a:	0077      	lsls	r7, r6, #1
 800460c:	463a      	mov	r2, r7
 800460e:	f000 f8e7 	bl	80047e0 <_realloc_r>
 8004612:	4605      	mov	r5, r0
 8004614:	2800      	cmp	r0, #0
 8004616:	d0de      	beq.n	80045d6 <__submore+0x1a>
 8004618:	eb00 0806 	add.w	r8, r0, r6
 800461c:	4601      	mov	r1, r0
 800461e:	4632      	mov	r2, r6
 8004620:	4640      	mov	r0, r8
 8004622:	f000 f829 	bl	8004678 <memcpy>
 8004626:	f8c4 8000 	str.w	r8, [r4]
 800462a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800462e:	e7e9      	b.n	8004604 <__submore+0x48>

08004630 <__locale_ctype_ptr_l>:
 8004630:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004634:	4770      	bx	lr
	...

08004638 <__locale_ctype_ptr>:
 8004638:	4b04      	ldr	r3, [pc, #16]	; (800464c <__locale_ctype_ptr+0x14>)
 800463a:	4a05      	ldr	r2, [pc, #20]	; (8004650 <__locale_ctype_ptr+0x18>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	2b00      	cmp	r3, #0
 8004642:	bf08      	it	eq
 8004644:	4613      	moveq	r3, r2
 8004646:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800464a:	4770      	bx	lr
 800464c:	20000048 	.word	0x20000048
 8004650:	200000ac 	.word	0x200000ac

08004654 <__ascii_mbtowc>:
 8004654:	b082      	sub	sp, #8
 8004656:	b901      	cbnz	r1, 800465a <__ascii_mbtowc+0x6>
 8004658:	a901      	add	r1, sp, #4
 800465a:	b142      	cbz	r2, 800466e <__ascii_mbtowc+0x1a>
 800465c:	b14b      	cbz	r3, 8004672 <__ascii_mbtowc+0x1e>
 800465e:	7813      	ldrb	r3, [r2, #0]
 8004660:	600b      	str	r3, [r1, #0]
 8004662:	7812      	ldrb	r2, [r2, #0]
 8004664:	1c10      	adds	r0, r2, #0
 8004666:	bf18      	it	ne
 8004668:	2001      	movne	r0, #1
 800466a:	b002      	add	sp, #8
 800466c:	4770      	bx	lr
 800466e:	4610      	mov	r0, r2
 8004670:	e7fb      	b.n	800466a <__ascii_mbtowc+0x16>
 8004672:	f06f 0001 	mvn.w	r0, #1
 8004676:	e7f8      	b.n	800466a <__ascii_mbtowc+0x16>

08004678 <memcpy>:
 8004678:	b510      	push	{r4, lr}
 800467a:	1e43      	subs	r3, r0, #1
 800467c:	440a      	add	r2, r1
 800467e:	4291      	cmp	r1, r2
 8004680:	d100      	bne.n	8004684 <memcpy+0xc>
 8004682:	bd10      	pop	{r4, pc}
 8004684:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004688:	f803 4f01 	strb.w	r4, [r3, #1]!
 800468c:	e7f7      	b.n	800467e <memcpy+0x6>
	...

08004690 <_free_r>:
 8004690:	b538      	push	{r3, r4, r5, lr}
 8004692:	4605      	mov	r5, r0
 8004694:	2900      	cmp	r1, #0
 8004696:	d045      	beq.n	8004724 <_free_r+0x94>
 8004698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800469c:	1f0c      	subs	r4, r1, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	bfb8      	it	lt
 80046a2:	18e4      	addlt	r4, r4, r3
 80046a4:	f000 f8df 	bl	8004866 <__malloc_lock>
 80046a8:	4a1f      	ldr	r2, [pc, #124]	; (8004728 <_free_r+0x98>)
 80046aa:	6813      	ldr	r3, [r2, #0]
 80046ac:	4610      	mov	r0, r2
 80046ae:	b933      	cbnz	r3, 80046be <_free_r+0x2e>
 80046b0:	6063      	str	r3, [r4, #4]
 80046b2:	6014      	str	r4, [r2, #0]
 80046b4:	4628      	mov	r0, r5
 80046b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046ba:	f000 b8d5 	b.w	8004868 <__malloc_unlock>
 80046be:	42a3      	cmp	r3, r4
 80046c0:	d90c      	bls.n	80046dc <_free_r+0x4c>
 80046c2:	6821      	ldr	r1, [r4, #0]
 80046c4:	1862      	adds	r2, r4, r1
 80046c6:	4293      	cmp	r3, r2
 80046c8:	bf04      	itt	eq
 80046ca:	681a      	ldreq	r2, [r3, #0]
 80046cc:	685b      	ldreq	r3, [r3, #4]
 80046ce:	6063      	str	r3, [r4, #4]
 80046d0:	bf04      	itt	eq
 80046d2:	1852      	addeq	r2, r2, r1
 80046d4:	6022      	streq	r2, [r4, #0]
 80046d6:	6004      	str	r4, [r0, #0]
 80046d8:	e7ec      	b.n	80046b4 <_free_r+0x24>
 80046da:	4613      	mov	r3, r2
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	b10a      	cbz	r2, 80046e4 <_free_r+0x54>
 80046e0:	42a2      	cmp	r2, r4
 80046e2:	d9fa      	bls.n	80046da <_free_r+0x4a>
 80046e4:	6819      	ldr	r1, [r3, #0]
 80046e6:	1858      	adds	r0, r3, r1
 80046e8:	42a0      	cmp	r0, r4
 80046ea:	d10b      	bne.n	8004704 <_free_r+0x74>
 80046ec:	6820      	ldr	r0, [r4, #0]
 80046ee:	4401      	add	r1, r0
 80046f0:	1858      	adds	r0, r3, r1
 80046f2:	4282      	cmp	r2, r0
 80046f4:	6019      	str	r1, [r3, #0]
 80046f6:	d1dd      	bne.n	80046b4 <_free_r+0x24>
 80046f8:	6810      	ldr	r0, [r2, #0]
 80046fa:	6852      	ldr	r2, [r2, #4]
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	4401      	add	r1, r0
 8004700:	6019      	str	r1, [r3, #0]
 8004702:	e7d7      	b.n	80046b4 <_free_r+0x24>
 8004704:	d902      	bls.n	800470c <_free_r+0x7c>
 8004706:	230c      	movs	r3, #12
 8004708:	602b      	str	r3, [r5, #0]
 800470a:	e7d3      	b.n	80046b4 <_free_r+0x24>
 800470c:	6820      	ldr	r0, [r4, #0]
 800470e:	1821      	adds	r1, r4, r0
 8004710:	428a      	cmp	r2, r1
 8004712:	bf04      	itt	eq
 8004714:	6811      	ldreq	r1, [r2, #0]
 8004716:	6852      	ldreq	r2, [r2, #4]
 8004718:	6062      	str	r2, [r4, #4]
 800471a:	bf04      	itt	eq
 800471c:	1809      	addeq	r1, r1, r0
 800471e:	6021      	streq	r1, [r4, #0]
 8004720:	605c      	str	r4, [r3, #4]
 8004722:	e7c7      	b.n	80046b4 <_free_r+0x24>
 8004724:	bd38      	pop	{r3, r4, r5, pc}
 8004726:	bf00      	nop
 8004728:	2000023c 	.word	0x2000023c

0800472c <_malloc_r>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	1ccd      	adds	r5, r1, #3
 8004730:	f025 0503 	bic.w	r5, r5, #3
 8004734:	3508      	adds	r5, #8
 8004736:	2d0c      	cmp	r5, #12
 8004738:	bf38      	it	cc
 800473a:	250c      	movcc	r5, #12
 800473c:	2d00      	cmp	r5, #0
 800473e:	4606      	mov	r6, r0
 8004740:	db01      	blt.n	8004746 <_malloc_r+0x1a>
 8004742:	42a9      	cmp	r1, r5
 8004744:	d903      	bls.n	800474e <_malloc_r+0x22>
 8004746:	230c      	movs	r3, #12
 8004748:	6033      	str	r3, [r6, #0]
 800474a:	2000      	movs	r0, #0
 800474c:	bd70      	pop	{r4, r5, r6, pc}
 800474e:	f000 f88a 	bl	8004866 <__malloc_lock>
 8004752:	4a21      	ldr	r2, [pc, #132]	; (80047d8 <_malloc_r+0xac>)
 8004754:	6814      	ldr	r4, [r2, #0]
 8004756:	4621      	mov	r1, r4
 8004758:	b991      	cbnz	r1, 8004780 <_malloc_r+0x54>
 800475a:	4c20      	ldr	r4, [pc, #128]	; (80047dc <_malloc_r+0xb0>)
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	b91b      	cbnz	r3, 8004768 <_malloc_r+0x3c>
 8004760:	4630      	mov	r0, r6
 8004762:	f000 f863 	bl	800482c <_sbrk_r>
 8004766:	6020      	str	r0, [r4, #0]
 8004768:	4629      	mov	r1, r5
 800476a:	4630      	mov	r0, r6
 800476c:	f000 f85e 	bl	800482c <_sbrk_r>
 8004770:	1c43      	adds	r3, r0, #1
 8004772:	d124      	bne.n	80047be <_malloc_r+0x92>
 8004774:	230c      	movs	r3, #12
 8004776:	6033      	str	r3, [r6, #0]
 8004778:	4630      	mov	r0, r6
 800477a:	f000 f875 	bl	8004868 <__malloc_unlock>
 800477e:	e7e4      	b.n	800474a <_malloc_r+0x1e>
 8004780:	680b      	ldr	r3, [r1, #0]
 8004782:	1b5b      	subs	r3, r3, r5
 8004784:	d418      	bmi.n	80047b8 <_malloc_r+0x8c>
 8004786:	2b0b      	cmp	r3, #11
 8004788:	d90f      	bls.n	80047aa <_malloc_r+0x7e>
 800478a:	600b      	str	r3, [r1, #0]
 800478c:	50cd      	str	r5, [r1, r3]
 800478e:	18cc      	adds	r4, r1, r3
 8004790:	4630      	mov	r0, r6
 8004792:	f000 f869 	bl	8004868 <__malloc_unlock>
 8004796:	f104 000b 	add.w	r0, r4, #11
 800479a:	1d23      	adds	r3, r4, #4
 800479c:	f020 0007 	bic.w	r0, r0, #7
 80047a0:	1ac3      	subs	r3, r0, r3
 80047a2:	d0d3      	beq.n	800474c <_malloc_r+0x20>
 80047a4:	425a      	negs	r2, r3
 80047a6:	50e2      	str	r2, [r4, r3]
 80047a8:	e7d0      	b.n	800474c <_malloc_r+0x20>
 80047aa:	428c      	cmp	r4, r1
 80047ac:	684b      	ldr	r3, [r1, #4]
 80047ae:	bf16      	itet	ne
 80047b0:	6063      	strne	r3, [r4, #4]
 80047b2:	6013      	streq	r3, [r2, #0]
 80047b4:	460c      	movne	r4, r1
 80047b6:	e7eb      	b.n	8004790 <_malloc_r+0x64>
 80047b8:	460c      	mov	r4, r1
 80047ba:	6849      	ldr	r1, [r1, #4]
 80047bc:	e7cc      	b.n	8004758 <_malloc_r+0x2c>
 80047be:	1cc4      	adds	r4, r0, #3
 80047c0:	f024 0403 	bic.w	r4, r4, #3
 80047c4:	42a0      	cmp	r0, r4
 80047c6:	d005      	beq.n	80047d4 <_malloc_r+0xa8>
 80047c8:	1a21      	subs	r1, r4, r0
 80047ca:	4630      	mov	r0, r6
 80047cc:	f000 f82e 	bl	800482c <_sbrk_r>
 80047d0:	3001      	adds	r0, #1
 80047d2:	d0cf      	beq.n	8004774 <_malloc_r+0x48>
 80047d4:	6025      	str	r5, [r4, #0]
 80047d6:	e7db      	b.n	8004790 <_malloc_r+0x64>
 80047d8:	2000023c 	.word	0x2000023c
 80047dc:	20000240 	.word	0x20000240

080047e0 <_realloc_r>:
 80047e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e2:	4607      	mov	r7, r0
 80047e4:	4614      	mov	r4, r2
 80047e6:	460e      	mov	r6, r1
 80047e8:	b921      	cbnz	r1, 80047f4 <_realloc_r+0x14>
 80047ea:	4611      	mov	r1, r2
 80047ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047f0:	f7ff bf9c 	b.w	800472c <_malloc_r>
 80047f4:	b922      	cbnz	r2, 8004800 <_realloc_r+0x20>
 80047f6:	f7ff ff4b 	bl	8004690 <_free_r>
 80047fa:	4625      	mov	r5, r4
 80047fc:	4628      	mov	r0, r5
 80047fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004800:	f000 f833 	bl	800486a <_malloc_usable_size_r>
 8004804:	42a0      	cmp	r0, r4
 8004806:	d20f      	bcs.n	8004828 <_realloc_r+0x48>
 8004808:	4621      	mov	r1, r4
 800480a:	4638      	mov	r0, r7
 800480c:	f7ff ff8e 	bl	800472c <_malloc_r>
 8004810:	4605      	mov	r5, r0
 8004812:	2800      	cmp	r0, #0
 8004814:	d0f2      	beq.n	80047fc <_realloc_r+0x1c>
 8004816:	4631      	mov	r1, r6
 8004818:	4622      	mov	r2, r4
 800481a:	f7ff ff2d 	bl	8004678 <memcpy>
 800481e:	4631      	mov	r1, r6
 8004820:	4638      	mov	r0, r7
 8004822:	f7ff ff35 	bl	8004690 <_free_r>
 8004826:	e7e9      	b.n	80047fc <_realloc_r+0x1c>
 8004828:	4635      	mov	r5, r6
 800482a:	e7e7      	b.n	80047fc <_realloc_r+0x1c>

0800482c <_sbrk_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	4c06      	ldr	r4, [pc, #24]	; (8004848 <_sbrk_r+0x1c>)
 8004830:	2300      	movs	r3, #0
 8004832:	4605      	mov	r5, r0
 8004834:	4608      	mov	r0, r1
 8004836:	6023      	str	r3, [r4, #0]
 8004838:	f7fc f9b0 	bl	8000b9c <_sbrk>
 800483c:	1c43      	adds	r3, r0, #1
 800483e:	d102      	bne.n	8004846 <_sbrk_r+0x1a>
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	b103      	cbz	r3, 8004846 <_sbrk_r+0x1a>
 8004844:	602b      	str	r3, [r5, #0]
 8004846:	bd38      	pop	{r3, r4, r5, pc}
 8004848:	20000370 	.word	0x20000370

0800484c <__ascii_wctomb>:
 800484c:	b149      	cbz	r1, 8004862 <__ascii_wctomb+0x16>
 800484e:	2aff      	cmp	r2, #255	; 0xff
 8004850:	bf85      	ittet	hi
 8004852:	238a      	movhi	r3, #138	; 0x8a
 8004854:	6003      	strhi	r3, [r0, #0]
 8004856:	700a      	strbls	r2, [r1, #0]
 8004858:	f04f 30ff 	movhi.w	r0, #4294967295
 800485c:	bf98      	it	ls
 800485e:	2001      	movls	r0, #1
 8004860:	4770      	bx	lr
 8004862:	4608      	mov	r0, r1
 8004864:	4770      	bx	lr

08004866 <__malloc_lock>:
 8004866:	4770      	bx	lr

08004868 <__malloc_unlock>:
 8004868:	4770      	bx	lr

0800486a <_malloc_usable_size_r>:
 800486a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800486e:	1f18      	subs	r0, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	bfbc      	itt	lt
 8004874:	580b      	ldrlt	r3, [r1, r0]
 8004876:	18c0      	addlt	r0, r0, r3
 8004878:	4770      	bx	lr
	...

0800487c <_init>:
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487e:	bf00      	nop
 8004880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004882:	bc08      	pop	{r3}
 8004884:	469e      	mov	lr, r3
 8004886:	4770      	bx	lr

08004888 <_fini>:
 8004888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488a:	bf00      	nop
 800488c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488e:	bc08      	pop	{r3}
 8004890:	469e      	mov	lr, r3
 8004892:	4770      	bx	lr
